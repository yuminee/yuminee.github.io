<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yumin&#39;s Techblog</title>
  <icon>https://www.gravatar.com/avatar/f57bd66cd00e00ab4551f01835fb236d</icon>
  
  <link href="https://yuminee.github.io/atom.xml" rel="self"/>
  
  <link href="https://yuminee.github.io/"/>
  <updated>2022-12-25T12:45:34.311Z</updated>
  <id>https://yuminee.github.io/</id>
  
  <author>
    <name>yumin park</name>
    <email>ayuminee2@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 2389. Longest Subsequence With Limited Sum</title>
    <link href="https://yuminee.github.io/2022/12/25/Algorithm/leetcode_2389_longest_subsequence_with_limited_sum/"/>
    <id>https://yuminee.github.io/2022/12/25/Algorithm/leetcode_2389_longest_subsequence_with_limited_sum/</id>
    <published>2022-12-25T10:44:01.000Z</published>
    <updated>2022-12-25T12:45:34.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>You are given an integer array nums of length n, and an integer array queries of length m.</p><p>Return an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i].</p><p>A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p></br><h2 id="접근"><a href="#접근" class="headerlink" title="접근"></a>접근</h2><ol><li>처음에는 python의 <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations">itertools.combinations</a>을 이용하여 subsequence를 구한뒤, 각각의 값을 sum을 하여 queries와 비교하려고 하였다.  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subsequence &#x3D; []</span><br><span class="line">for n in range(len(nums)+1):</span><br><span class="line">    subsequence &#x3D; subsequence+list(combinations(nums, n))</span><br></pre></td></tr></table></figure></li><li>코드를 작성하다보니, list를 sort하여 아래와 같이 nums를 만들게 되면 부분 집합 리스트의 길이는 각 nums의 index와 동일하고, 그 값은 최소값이 나오게 된다. 구해야하는것은 부분집합을 더해서 그 값이 queries보다 작거나 같을때, 가장 긴 부분집합의 길이를 구하는것이므로, 각 길이마다 나오는 최소값을 더하게 되면 문제의 조건에 부합하는 가장 긴 부분집합길이를 구할 수 있다. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums.sort()</span><br><span class="line">for i in range(1, len(nums)):</span><br><span class="line">    nums[i] +&#x3D; nums[i - 1]</span><br></pre></td></tr></table></figure></li><li>실제로 값은 bisect.bisect_right을 통하여 구하였는데 이때의 리스트 nums의 값들은 부분 집합 길이가 n일때 그 부분집합들의 합의 최소값이므로 queries 원소인 query를 bisect_right로 넣었을때 나오는 index가 결국 정답이 된다.  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">answer &#x3D; []</span><br><span class="line"></span><br><span class="line">for query in queries:</span><br><span class="line">    index &#x3D; bisect.bisect_right(nums, query)</span><br><span class="line">    answer.append(index)</span><br></pre></td></tr></table></figure></li></ol></br><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from typing import List</span><br><span class="line">import bisect</span><br><span class="line"></span><br><span class="line">class Solution:</span><br><span class="line">    def answerQueries(self, nums: List[int], queries: List[int]) -&gt; List[int]:</span><br><span class="line">        nums.sort()</span><br><span class="line">        for i in range(1, len(nums)):</span><br><span class="line">            nums[i] +&#x3D; nums[i - 1]</span><br><span class="line"></span><br><span class="line">        answer &#x3D; []</span><br><span class="line"></span><br><span class="line">        for query in queries:</span><br><span class="line">            index &#x3D; bisect.bisect_right(nums, query)</span><br><span class="line">            answer.append(index)</span><br><span class="line">            </span><br><span class="line">        return answer</span><br></pre></td></tr></table></figure></br><h3 id="LINK"><a href="#LINK" class="headerlink" title="LINK"></a>LINK</h3><p><a href="https://github.com/yuminee/algorithm/blob/master/LeetCode/2389_longest_subsequence_with_limited_sum.py">Github: 2389. Longest Subsequence With Limited Sum</a></p><p><a href="https://leetcode.com/problems/longest-subsequence-with-limited-sum/description/">LeetCode: 2389. Longest Subsequence With Limited Sum</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h2&gt;&lt;p&gt;You are given an integer array nums of length n, and an integer array </summary>
      
    
    
    
    <category term="Algorithm" scheme="https://yuminee.github.io/categories/Algorithm/"/>
    
    
    <category term="LeetCode" scheme="https://yuminee.github.io/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="https://yuminee.github.io/tags/Algorithm/"/>
    
    <category term="bisect" scheme="https://yuminee.github.io/tags/bisect/"/>
    
  </entry>
  
  <entry>
    <title>Python bisect_left,bisect_right</title>
    <link href="https://yuminee.github.io/2022/12/24/Python/bisect/"/>
    <id>https://yuminee.github.io/2022/12/24/Python/bisect/</id>
    <published>2022-12-24T10:44:01.000Z</published>
    <updated>2022-12-25T12:47:58.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-bisect-left-bisect-right의-기본-사용법"><a href="#python-bisect-left-bisect-right의-기본-사용법" class="headerlink" title="python bisect_left, bisect_right의 기본 사용법"></a>python bisect_left, bisect_right의 기본 사용법</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from bisect import bisect_right, bisect_left</span><br><span class="line"></span><br><span class="line">nums &#x3D; [10, 12, 15, 16, 19]</span><br><span class="line">print(bisect_left(nums, 15) #return 2</span><br><span class="line">print(bisect_right(nums, 15)) #return 3</span><br></pre></td></tr></table></figure><ul><li><p>bisect_left(a, x, lo=0, hi=len(a))</p><ul><li>정렬된 a에 x를 삽입할 위치를 리턴해준다.</li><li>x가 a에 이미 있는 값이라면 기존 값 왼쪽 위치를 리턴 한다.</li></ul></li><li><p>bisect_right(a, x, lo=0, hi=len(a))</p><ul><li>정렬된 a에 x를 삽입할 위치를 리턴해준다.</li><li>x가 a에 이미 있는 값이라면 기존 값 오른쪽 위치를 리턴 한다.</li></ul></li></ul></br><h2 id="python-3-11에서-추가된-내용"><a href="#python-3-11에서-추가된-내용" class="headerlink" title="python 3.11에서 추가된 내용"></a>python 3.11에서 추가된 내용</h2><ul><li><p>bisect_left(a, x, lo=0, hi=len(a), *, key = None)</p><ul><li>정렬된 a에 x를 삽입할 위치를 리턴해준다.</li><li>x가 a에 이미 있는 값이라면 기존 값 왼쪽 위치를 리턴 한다.</li></ul></li><li><p>bisect_right(a, x, lo=0, hi=len(a), *, key = None)</p><ul><li>정렬된 a에 x를 삽입할 위치를 리턴해준다.</li><li>x가 a에 이미 있는 값이라면 기존 값 오른쪽 위치를 리턴 한다.</li></ul></li></ul></br><h3 id="참고한-사이트"><a href="#참고한-사이트" class="headerlink" title="[참고한 사이트]"></a>[참고한 사이트]</h3><ul><li><p><a href="https://docs.python.org/3/library/bisect.html">bisect — Array bisection algorithm — Python 3.11.0 documentation</a></p></li><li><p><a href="https://python.flowdas.com/library/bisect.html">bisect — 배열 이진 분할 알고리즘 — 파이썬 설명서 주석판</a></p></li><li><p><a href="https://www.geeksforgeeks.org/bisect-algorithm-functions-in-python/">Bisect Algorithm Functions in Python - GeeksforGeeks</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;python-bisect-left-bisect-right의-기본-사용법&quot;&gt;&lt;a href=&quot;#python-bisect-left-bisect-right의-기본-사용법&quot; class=&quot;headerlink&quot; title=&quot;python bisect_</summary>
      
    
    
    
    <category term="Python" scheme="https://yuminee.github.io/categories/Python/"/>
    
    
    <category term="bisect" scheme="https://yuminee.github.io/tags/bisect/"/>
    
    <category term="python3" scheme="https://yuminee.github.io/tags/python3/"/>
    
    <category term="bisect_left" scheme="https://yuminee.github.io/tags/bisect-left/"/>
    
    <category term="bisect_right" scheme="https://yuminee.github.io/tags/bisect-right/"/>
    
  </entry>
  
  <entry>
    <title>A tale of performance — ECS, Boto3 &amp; IAM</title>
    <link href="https://yuminee.github.io/2022/03/06/AWS/tale_of_perpormance_ecs_boto3_iam/"/>
    <id>https://yuminee.github.io/2022/03/06/AWS/tale_of_perpormance_ecs_boto3_iam/</id>
    <published>2022-03-06T06:00:01.000Z</published>
    <updated>2022-03-06T16:08:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://engineering.instawork.com/a-tale-of-performance-ecs-boto3-iam-dd22a2624398">https://engineering.instawork.com/a-tale-of-performance-ecs-boto3-iam-dd22a2624398</a></p><p>위의 글을 보고 정리한 내용입니다.</p><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><ul><li>몇몇 API들의 퍼포먼스가 좋지 않는것을 발견했는데, 해당 API들이 S3를 콜할때 5000ms이상 걸린다는 사실을 알게됨.</li></ul><h2 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h2><ul><li>IAM을 통해서 S3에 접근하는 권한을 얻는데 시간이 너무 오래 걸림.</li></ul><h2 id="문제-해결을-위해-알아야-할-개념"><a href="#문제-해결을-위해-알아야-할-개념" class="headerlink" title="문제 해결을 위해 알아야 할 개념"></a>문제 해결을 위해 알아야 할 개념</h2><h3 id="AWS-IAM"><a href="#AWS-IAM" class="headerlink" title="AWS IAM?"></a>AWS IAM?</h3><p>위의 문제를 잘 이해하기 위해서는 AWS의 IAM이 어떻게 동작하는지를 알아야 한다. AWS에서는 특정 리소스에 접근할 경우, 해당 수준의 권한이 필요하다. IAM을 통해 액세스를 할 수 있는데, 아래 두가지 방법이 일반적이다.</p><ol><li>IAM user 생성. 코드안에 access key와 access key secret 을 넣어서 사용. 주로 로컬에서 돌릴때 해당 방법을 쓴다.</li><li>IAM role 생성. 돌아가는 서버에 해당 롤을 주는것. 이 방법을 더 추천하는데 그 이유는 보안적으로 관리하기가 쉽기 때문이다(access key와 access key secret를 제공 안해도 되기 때문)</li></ol><h3 id="EC2-Server에-role을-붙일-경우-생기는-일"><a href="#EC2-Server에-role을-붙일-경우-생기는-일" class="headerlink" title="EC2 Server에 role을 붙일 경우 생기는 일."></a>EC2 Server에 role을 붙일 경우 생기는 일.</h3><p>boto3를 이용하여 s3을 사용할때 생기는일</p><ol><li>Boto3 call에 대한 권한이 있는지 알아보기 위해 access key와 access key secret을 확인. 하지만 키를 제공하지 않았으므로 실패</li><li>~/.aws/credentials file 확인. 하지만 해당 파일을 제공하지 않았으므로 실패</li><li>instance metadata service (IMDS)을 사용하여 ec2 metadata endpoint를 콜하므로써 s3의임시 권한을 얻음.</li></ol><h3 id="그러면-왜-느리냐"><a href="#그러면-왜-느리냐" class="headerlink" title="그러면 왜 느리냐?"></a>그러면 왜 느리냐?</h3><p>권한만 있으면 되는건데 왜 그냥 한번으로 해결되지 않는걸까?</p><img width="468" alt="스크린샷 2022-03-07 오전 1 02 44" src="https://user-images.githubusercontent.com/33755241/156931202-60185eb8-90f5-4fb3-8b63-17f428a0acdf.png"><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><h3 id="그래서-뭘-해야함"><a href="#그래서-뭘-해야함" class="headerlink" title="그래서 뭘 해야함?"></a>그래서 뭘 해야함?</h3><ul><li>hop count를 2로 늘린다.</li><li>ecs task role을 이용한다.</li></ul><p>AWS에서 권한을 얻는 우선순위는 아래와 같다.</p><ol><li>command line options</li><li>Environment vairables</li><li>CLI credentials file</li><li>CLI configuration file</li><li>Container Credentials(ECS task role)</li><li>Instance profile credentials</li></ol><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>AWS에서 서비스에 접근하는 권한이 너무 느리다면(특히 컨테이너 환경에서) 다음 3가지를 고려해서 사용해 보기.</p><ol><li>hot limit을 2이상으로 늘리기</li><li>Boto3의 session사용(요청마다 권한을 얻을 필요 없이 session을 유지하여 사용하는 옵션)</li><li>ECS task role 사용하기</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://engineering.instawork.com/a-tale-of-performance-ecs-boto3-iam-dd22a2624398&quot;&gt;https://engineering.instawork.com/a-tale-of-</summary>
      
    
    
    
    <category term="AWS" scheme="https://yuminee.github.io/categories/AWS/"/>
    
    
    <category term="AWS" scheme="https://yuminee.github.io/tags/AWS/"/>
    
    <category term="ECS" scheme="https://yuminee.github.io/tags/ECS/"/>
    
    <category term="boto3" scheme="https://yuminee.github.io/tags/boto3/"/>
    
    <category term="IAM" scheme="https://yuminee.github.io/tags/IAM/"/>
    
  </entry>
  
  <entry>
    <title>nginx crush (1)</title>
    <link href="https://yuminee.github.io/2022/03/01/nginx/nginx-crush01/"/>
    <id>https://yuminee.github.io/2022/03/01/nginx/nginx-crush01/</id>
    <published>2022-03-01T13:55:05.000Z</published>
    <updated>2022-03-01T15:09:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Nginx-Docker-Setting"><a href="#1-Nginx-Docker-Setting" class="headerlink" title="1. Nginx Docker Setting"></a>1. Nginx Docker Setting</h2><p>Nginx를 공부하기 위해 nginx docker image를 사용하였다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run --name webserver -d -p 80:80 nginx</span><br></pre></td></tr></table></figure><p>위의 명령어로 nginx 컨테이너를 실행하였고,</p><img width="640" alt="스크린샷 2022-03-01 오후 11 04 17" src="https://user-images.githubusercontent.com/33755241/156183570-87f61b52-d66f-4af9-ab39-7be66786fe01.png"><p>localhost:80 으로 nginx가 잘 작동하고 있는것을 확인 하였다.</p><p>더 자세하게 Nginx docker안으로 들어가서 어떻게 동작하고 있는지를 확인하기 위해서 컨테이너안으로 접속했다.</p><p>분홍색 형광팬은 명령어, 초록색은 docker container id 이다.</p><p><img src="https://user-images.githubusercontent.com/33755241/156184710-f6c39e52-cbd7-4959-90a9-fd39105070e7.png" alt="image"></p><p>Nginx Version 1.21.6이 설치 된 것을 마지막 nginx -v 명령어로 확인 할 수 있다.</p><blockquote><p>혹시나 같은 에러를 만나시는 분들을 위해서</p></blockquote><img width="765" alt="스크린샷 2022-03-01 오후 11 14 48" src="https://user-images.githubusercontent.com/33755241/156185669-06546008-915c-445e-aeb6-be7981b1f1cc.png"><p>ps -ef | grep nginx 명령어를 통해서 nginx를 포함하는 프로세스를 찾으려고 했는데 ps 명령어를 찾을 수 없다 하여 <a href="https://zetawiki.com/wiki/Bash:_ps:_command_not_found">여기</a>  를 통하여 해당 에러를 해결한 후 진행했다. </p><img width="765" alt="스크린샷 2022-03-01 오후 11 21 01" src="https://user-images.githubusercontent.com/33755241/156186132-5d96be2c-f4e6-458f-8792-b54b5ac61a3e.png"><p>여기서 주목해야 할 것은 엔진엑스가 정상적으로 실행 중이라면 항상 마스터 프로세스가 한 개, 워커 프로세스가 한 개 이상 있다는 점이다. 엔진엑스가 제대로 동작하려면 권한 상승이 필요하므로 마스터 프로세스가 root 권한으로 실행 중이라는 점을 알고 가자!</p><h2 id="2-주요-설정-파일-디렉터리-명령어"><a href="#2-주요-설정-파일-디렉터리-명령어" class="headerlink" title="2. 주요 설정 파일, 디렉터리, 명령어"></a>2. 주요 설정 파일, 디렉터리, 명령어</h2><h3 id="엔진엑스-주요-설정-파일과-디렉터리"><a href="#엔진엑스-주요-설정-파일과-디렉터리" class="headerlink" title="엔진엑스 주요 설정 파일과 디렉터리"></a>엔진엑스 주요 설정 파일과 디렉터리</h3><p>밑에 설명 외 더 자세한 정보는 <a href="https://www.nginx.com/resources/wiki/start/topics/examples/full/">nginx 홈페이지에서 full example</a> 을 확인 할 수 있다.</p><ul><li><p>/etc/nginx</p><p>엔진엑스 서버가 사용하는 기본 설정이 저장된 루트 디렉터리. 엔진엑스는 이곳에 저장된 설정 파일의 내용에 따라 동작.</p><img width="504" alt="스크린샷 2022-03-01 오후 11 25 07" src="https://user-images.githubusercontent.com/33755241/156186805-cd5bca49-b060-44e3-8b00-27a451cc198e.png"></li><li><p>/etc/nginx/nginx.conf</p><p>엔젠엑스의 기본 성정 파일로, 모든 설정에 대한 진입점. 워커 프로세스 개수, 튜닝, 동적 모듈 적재와 같은 글로벌 설정 항목을 포함하며, 다른 엔진엑스 세부 설정 파일에 대한 참조를 지정. 뿐만 아니라 이어서 설명할 디렉터리에 위치한 모든 설정 파일을 포함하는 최상위 http 블록을 갖고 있음.</p><img src="https://user-images.githubusercontent.com/33755241/156189300-02dd803c-48d6-4649-8337-03ac39fadeca.png" width="50%"></li><li><p>/etc/nginx/conf.d/</p><p>기본 http 서버 설정 파일을 포함(default.conf). default.conf 파일 내의 server 블록은 엔진엑스를 사용하면서 몇번 작성해보았던 익숙한 내용들이다.</p><img width="50%" alt="스크린샷 2022-03-01 오후 11 53 32" src="https://user-images.githubusercontent.com/33755241/156191562-b7b4d2a5-bf7f-4649-a087-c94042eeb629.png"></li></ul><ul><li><p>/var/log/nginx</p><p>엔진엑스의 로그가 저장되는 디렉터리이다. access.log 파일과 error.log파일이 있다. 엔진엑스 설정을 통해 debug 모듈을 활설화 했다면 디버그 정보도 오류 로그 파일에 기록된다.</p></li></ul><h3 id="엔진엑스-명령어"><a href="#엔진엑스-명령어" class="headerlink" title="엔진엑스 명령어"></a>엔진엑스 명령어</h3><ul><li><p>nginx -T</p><p>위의 설정 파일을 시험하고 결과를 화면에 보여줌. </p></li><li><p>nginx -s reload</p><p>설정에 문제가 없다면 엔진엑스가 변경된 설정을 읽어드리도록 reload</p><p>해당 명령어를 통해서는 패킷 손실 없이 설정을 리로드 할 수 있다.(무중단 설정 리로드)</p></li><li><p>nginx -s signal</p><p>s 매개변수는 지정된 신호(stop, quit, reload, reopen)를 엔진엑스 마스터 프로세스에 전송. </p><ul><li>stop은 엔진엑스 프로세스가 즉시 동작을 멈춤.</li><li>quit은 현재 진행 중인 요청을 모두 처리한 뒤 엔진엑스 프로세스를 종료</li><li>reload는 엔진엑스가 설정을 다시 읽어드리게 함.</li><li>reopen은 지정된 로그 파일을 다시 열도록 명령.</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Nginx-Docker-Setting&quot;&gt;&lt;a href=&quot;#1-Nginx-Docker-Setting&quot; class=&quot;headerlink&quot; title=&quot;1. Nginx Docker Setting&quot;&gt;&lt;/a&gt;1. Nginx Docker Set</summary>
      
    
    
    
    <category term="Nginx" scheme="https://yuminee.github.io/categories/Nginx/"/>
    
    
    <category term="nignx" scheme="https://yuminee.github.io/tags/nignx/"/>
    
    <category term="Nginx" scheme="https://yuminee.github.io/tags/Nginx/"/>
    
    <category term="엔진엑스" scheme="https://yuminee.github.io/tags/%EC%97%94%EC%A7%84%EC%97%91%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes presentation</title>
    <link href="https://yuminee.github.io/2021/10/01/K8s/k8s_%20presentation/"/>
    <id>https://yuminee.github.io/2021/10/01/K8s/k8s_%20presentation/</id>
    <published>2021-10-01T06:00:01.000Z</published>
    <updated>2021-10-02T16:22:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>쿠버네티스 발표를 위한 발표자료이다.</p><p><a href="https://github.com/yuminee/yumine.github.io-src/files/7271800/k8s.pdf">k8s.pdf</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;쿠버네티스 발표를 위한 발표자료이다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yuminee/yumine.github.io-src/files/7271800/k8s.pdf&quot;&gt;k8s.pdf&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Kubernetes" scheme="https://yuminee.github.io/categories/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://yuminee.github.io/tags/Kubernetes/"/>
    
    <category term="K8s" scheme="https://yuminee.github.io/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>도커 볼륨으로 데이터 보존하기</title>
    <link href="https://yuminee.github.io/2021/02/12/Docker/docker8/"/>
    <id>https://yuminee.github.io/2021/02/12/Docker/docker8/</id>
    <published>2021-02-12T06:55:16.000Z</published>
    <updated>2021-06-02T15:08:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="도커-볼륨으로-데이터-보존하기"><a href="#도커-볼륨으로-데이터-보존하기" class="headerlink" title="도커 볼륨으로 데이터 보존하기"></a>도커 볼륨으로 데이터 보존하기</h1><p>도커 자체에서 제공하는 볼륨 기능을 활용해 데이터를 보존할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># docker volume create --name myvolume</span><br><span class="line"># docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME     </span><br><span class="line">local     myvolume</span><br></pre></td></tr></table></figure><p>위의 명령어로 도커 볼륨을 생성하고, 아래의 명령어로 myvolume이라는 볼륨을 사용하는 컨테이너를 생성한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># docker run -i -t --name myvolume_1 -v myvolume:&#x2F;root&#x2F; ubuntu</span><br><span class="line">root@f333e2b6b071:&#x2F;# echo hello, volume! &gt;&gt; &#x2F;root&#x2F;volume</span><br></pre></td></tr></table></figure><p>위의 예시는 볼륨을 컨테이너의 /root/ 디렉터리에 마운트하므로 /root 디렉터리에 파일을 쓰면 해당 파일이 볼륨에 저장된다.  /root 디렉터리에 volume이라는 파일을 생성했다. 다른 컨테이너도 myvolume 볼륨을 쓰면 볼륨을 활용한 디렉터리에 volume 파일이 존재할 것 이다. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;도커-볼륨으로-데이터-보존하기&quot;&gt;&lt;a href=&quot;#도커-볼륨으로-데이터-보존하기&quot; class=&quot;headerlink&quot; title=&quot;도커 볼륨으로 데이터 보존하기&quot;&gt;&lt;/a&gt;도커 볼륨으로 데이터 보존하기&lt;/h1&gt;&lt;p&gt;도커 자체에서 제공하는 볼</summary>
      
    
    
    
    <category term="Docker" scheme="https://yuminee.github.io/categories/Docker/"/>
    
    
    <category term="docker" scheme="https://yuminee.github.io/tags/docker/"/>
    
    <category term="도커" scheme="https://yuminee.github.io/tags/%EB%8F%84%EC%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>도커 호스트 볼륨 다른 컨테이너에 덮어쓰기</title>
    <link href="https://yuminee.github.io/2021/02/11/Docker/docker7/"/>
    <id>https://yuminee.github.io/2021/02/11/Docker/docker7/</id>
    <published>2021-02-11T06:55:16.000Z</published>
    <updated>2021-06-02T15:00:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="도커-호스트-볼륨-다른-컨테이너에-덮어쓰기"><a href="#도커-호스트-볼륨-다른-컨테이너에-덮어쓰기" class="headerlink" title="도커 호스트 볼륨 다른 컨테이너에 덮어쓰기"></a>도커 호스트 볼륨 다른 컨테이너에 덮어쓰기</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t --name volume_dummy alicek106&#x2F;volume_test</span><br></pre></td></tr></table></figure><p>위의 명령어로 volume_test 라는 컨테이너를 만들었다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@d44885d7827e:&#x2F;# ls &#x2F;home&#x2F;testdir_2&#x2F;</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>위의 컨테이너에는 test 라는 폴더가 들어있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t --name volume_overide -v &#x2F;Users&#x2F;yuminkuu&#x2F;Desktop&#x2F;wordpress_db:&#x2F;home&#x2F;testdir_2 alicek106&#x2F;volume_test</span><br></pre></td></tr></table></figure><p>위의 명령어로 이미지에 원래 존재하던 디렉터리에 호스트의 볼륨을 공유하였고,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@092d0af651c7:&#x2F;# ls &#x2F;home&#x2F;testdir_2&#x2F;</span><br><span class="line">aria_log.00000001  aria_log_control  ib_buffer_pool  ib_logfile0  ibdata1  multi-master.info  mysql  performance_schema  wordpress</span><br></pre></td></tr></table></figure><p>위와 같은 결과를 얻었다(전 포스터에서 만든 wordpress_db를 그대로 가져온것을 알 수 있다.) 즉, 컨테이너 디렉터리내용이 덮혀 사라지고, 호스트 볼륨에 있던 내용이 쓰여진다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;도커-호스트-볼륨-다른-컨테이너에-덮어쓰기&quot;&gt;&lt;a href=&quot;#도커-호스트-볼륨-다른-컨테이너에-덮어쓰기&quot; class=&quot;headerlink&quot; title=&quot;도커 호스트 볼륨 다른 컨테이너에 덮어쓰기&quot;&gt;&lt;/a&gt;도커 호스트 볼륨 다른 컨테이너</summary>
      
    
    
    
    <category term="Docker" scheme="https://yuminee.github.io/categories/Docker/"/>
    
    
    <category term="docker" scheme="https://yuminee.github.io/tags/docker/"/>
    
    <category term="도커" scheme="https://yuminee.github.io/tags/%EB%8F%84%EC%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>도커 호스트랑 볼륨 공유하기</title>
    <link href="https://yuminee.github.io/2021/02/10/Docker/docker6/"/>
    <id>https://yuminee.github.io/2021/02/10/Docker/docker6/</id>
    <published>2021-02-10T06:55:16.000Z</published>
    <updated>2021-06-02T14:46:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="도커-호스트랑-볼륨-공유하기"><a href="#도커-호스트랑-볼륨-공유하기" class="headerlink" title="도커 호스트랑 볼륨 공유하기"></a>도커 호스트랑 볼륨 공유하기</h1><p>전 포스터에서는 컨테이너로 워드프레스와 디비를 연결해서 만들어 보았다. 컨테이너로 데이터베이스 작업을 하였을때 가장 큰 단점은 mariadb 컨테이너를 삭제하면 컨테이너의 계층에 저장되어 있던 데이터베이스의 정보도 삭제 된다는 것이다.</p><p>도커의 컨테이너는 생성과 삭제가 매우 쉬우므로 실수로 컨테이너를 삭제하면 데이터를 복구할 수 없게 된다. <strong>이를 방지하기 위해 컨테이너의 데이터를 영속적 데이터로 활용할 수 있는 방법이 몇가지 있는데, 그중 가장 쉬운것이 볼륨을 활용하는 것이다.</strong></p><p>볼륨을 활용하는 방법은,</p><ul><li>호스트와 볼륨 공유하기</li><li>볼륨 컨테이너 활용</li><li>도커과 관리하는 볼륨 생성</li></ul><p>이 포스팅에서는 첫번째 방법인 <code>호스트와 볼륨 공유하기</code> 를 해볼 것이다. 이 방식으로 데이터 베이스 컨테이너를 삭제해도 데이터는 삭제되지 않도록 설정 해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># sudo docker run -d \</span><br><span class="line">--name wordpressdb_volume \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;password \</span><br><span class="line">-e MYSQL_DATABASE&#x3D;wordpress \</span><br><span class="line">-v &#x2F;Users&#x2F;wordpress_db:&#x2F;var&#x2F;lib&#x2F;mysql \</span><br><span class="line">mariadb</span><br></pre></td></tr></table></figure><p>위의 명령어로 마리아 디비 컨테이너를 생성할려고 하였다.  원래라면 -v 옵션으로 해당 위치에 파일이 생성되어야 하는데,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker: Error response from daemon: error while creating mount source path &#39;&#x2F;Users&#x2F;wordpress_db&#39;: mkdir &#x2F;Users&#x2F;wordpress_db: operation not permitted.</span><br></pre></td></tr></table></figure><p>하는 에러가 자꾸 떴다. </p><p>그래서 찾다가 그냥 docker desktop으로,</p><p>Preferences -&gt; Resources -&gt; File Sharing 부분에서 path를 추가시켜주고</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># sudo docker run -d \</span><br><span class="line">--name wordpressdb_volume \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;password \</span><br><span class="line">-e MYSQL_DATABASE&#x3D;wordpress \</span><br><span class="line">-v &#x2F;Users&#x2F;yuminkuu&#x2F;Desktop&#x2F;wordpress_db:&#x2F;var&#x2F;lib&#x2F;mysql \</span><br><span class="line">mariadb</span><br></pre></td></tr></table></figure><p>생성한 path로 볼륨을 설정하여 만들어주니 에러없이 잘 작동하였다.</p><p>위와 같은 방식으로 wordpress 컨테이너는 아래와 같이 생성하였다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># docker run -d \</span><br><span class="line">&gt; -e WORDPRESS_DB_PASSWORD&#x3D;password \</span><br><span class="line">&gt; --name wordpress_volume \</span><br><span class="line">&gt; --link wordpressdb_volume:mariadb \</span><br><span class="line">&gt; -p 80 \</span><br><span class="line">&gt; wordpress</span><br></pre></td></tr></table></figure><p>이렇게 호스트와 볼륨을 공유하는 방식으로 생성된 컨테이너는 컨테이너를 지워도 해당 폴더의 데이터들이 그대로 남아있게 된다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt; wordpress_db ls</span><br><span class="line">aria_log.00000001  ib_buffer_pool     ibdata1            multi-master.info  performance_schema</span><br><span class="line">aria_log_control   ib_logfile0        ibtmp1             mysql              wordpress</span><br></pre></td></tr></table></figure><p>ls 명령어로 확인하였을때 컨테이너의 파일이 복사되어 있는것을 확인 할 수 있다.</p><p>하지만 컨테이너를 지우고 다시 생성하면서 같은 폴더를 볼륨으로 생성하면, 파일이 덮어지는것 같으니 조심하자!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;도커-호스트랑-볼륨-공유하기&quot;&gt;&lt;a href=&quot;#도커-호스트랑-볼륨-공유하기&quot; class=&quot;headerlink&quot; title=&quot;도커 호스트랑 볼륨 공유하기&quot;&gt;&lt;/a&gt;도커 호스트랑 볼륨 공유하기&lt;/h1&gt;&lt;p&gt;전 포스터에서는 컨테이너로 워드프</summary>
      
    
    
    
    <category term="Docker" scheme="https://yuminee.github.io/categories/Docker/"/>
    
    
    <category term="docker" scheme="https://yuminee.github.io/tags/docker/"/>
    
    <category term="도커" scheme="https://yuminee.github.io/tags/%EB%8F%84%EC%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Apple Sillicon/M1 Mysql error, Wordpress-mariadb 연결</title>
    <link href="https://yuminee.github.io/2021/02/09/Docker/docker5/"/>
    <id>https://yuminee.github.io/2021/02/09/Docker/docker5/</id>
    <published>2021-02-09T06:55:16.000Z</published>
    <updated>2021-06-02T14:45:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apple-Sillicon-M1-Mysql-error-Wordpress-mariadb-연결"><a href="#Apple-Sillicon-M1-Mysql-error-Wordpress-mariadb-연결" class="headerlink" title="Apple Sillicon/M1 Mysql error, Wordpress-mariadb 연결"></a>Apple Sillicon/M1 Mysql error, Wordpress-mariadb 연결</h1><p>도커를 학습하면서 mysql 컨테이너를 다운받아 워드 프레스에 연결하려는데, 다음과 같은 에러가 났다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># docker run -d \</span><br><span class="line">--name wordpressdb \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;password \</span><br><span class="line">-e MYSQL_DATABASE&#x3D;wordpress \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure><p>라고 명령어를 쳤고,</p><p>받은 에러는</p><p><strong>Unable to find image ‘mysql:latest’ locally<br>latest: Pulling from library/mysql<br>docker: no matching manifest for linux/arm64/v8 in the manifest list entries.<br>See ‘docker run –help’.</strong></p><p>즉, linux/arm64/v8 이 manifest 에 없다 뭐 그런 이야기인거 같은데 애플 실리콘 m1칩을 쓰면서 여러가지 산전수전을 많이 겪어서 stackoverflow에서 여러가지를 찾다가 찾는글이다.</p><p><a href="https://stackoverflow.com/questions/65456814/docker-apple-silicon-m1-preview-mysql-no-matching-manifest-for-linux-arm64-v8">https://stackoverflow.com/questions/65456814/docker-apple-silicon-m1-preview-mysql-no-matching-manifest-for-linux-arm64-v8</a></p><p>어찌되었든 결론적으로 mysql 대신에 마리아db를 쓰라는건데,</p><p><a href="https://docs.docker.com/docker-for-mac/apple-m1/">https://docs.docker.com/docker-for-mac/apple-m1/</a></p><p>M1칩에 관한 docker docs에 보면 위와 같은 이슈가 있으니, mysql 대신에 mariadb이미지를 쓰라고 되어있다. </p><blockquote><p>Not all images are available for ARM64. You can add <code>--platform linux/amd64</code> to run an Intel image under emulation.</p><p>In particular, the <a href="https://hub.docker.com/_/mysql?tab=tags&page=1&ordering=last_updated">mysql</a> image is not available for ARM64. You can work around this issue by using a <a href="https://hub.docker.com/_/mariadb?tab=tags&page=1&ordering=last_updated">mariadb</a> image.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># docker run -d \</span><br><span class="line">name wordpressdb \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;password \</span><br><span class="line">-e MYSQL_DATABASE&#x3D;wordpress \</span><br><span class="line">mariadb</span><br></pre></td></tr></table></figure><p>위의 명령어로 mariadb를 다운받고 실행시켜 준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># docker run -d \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD&#x3D;password \</span><br><span class="line">--name wordpress \</span><br><span class="line">--link wordpressdb:mysql \</span><br><span class="line">-p 80 \</span><br><span class="line">wordpress</span><br></pre></td></tr></table></figure><p>위의 명령어로 wordpress를 다운받고 실행시켜 준다.</p><p>그 다음, docker ps 명령어로 확인해보면,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># docker ps</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                   NAMES</span><br><span class="line">65eb2de5ed25   wordpress   &quot;docker-entrypoint.s…&quot;   12 seconds ago   Up 10 seconds   0.0.0.0:49157-&gt;80&#x2F;tcp   wordpress</span><br><span class="line">0660deed1975   mariadb     &quot;docker-entrypoint.s…&quot;   29 seconds ago   Up 28 seconds   3306&#x2F;tcp                wordpressdb</span><br></pre></td></tr></table></figure><p>위의 결과를 보면 PORTS에서 0.0.0.0:49157 -&gt; 80으로 호스트의 port 49157로 접근을 하면, 80으로 포트포워딩을 해준다고 나와있다. </p><p>확인해 보기 위해서 위의 주소로 들어가면</p><p>![스크린샷 2021-02-10 오전 2.46.10](/Users/yuminkuu/Desktop/스크린샷 2021-02-10 오전 2.46.10.png)</p><p>이렇게 워드 프레스 초기 설정화면이 뜨는것을 확인 할 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Apple-Sillicon-M1-Mysql-error-Wordpress-mariadb-연결&quot;&gt;&lt;a href=&quot;#Apple-Sillicon-M1-Mysql-error-Wordpress-mariadb-연결&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="Docker" scheme="https://yuminee.github.io/categories/Docker/"/>
    
    
    <category term="docker" scheme="https://yuminee.github.io/tags/docker/"/>
    
    <category term="도커" scheme="https://yuminee.github.io/tags/%EB%8F%84%EC%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>외부에서 도커 컨테이너 접근하기</title>
    <link href="https://yuminee.github.io/2021/02/09/Docker/docker4/"/>
    <id>https://yuminee.github.io/2021/02/09/Docker/docker4/</id>
    <published>2021-02-09T06:55:16.000Z</published>
    <updated>2021-06-02T14:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="외부에서-도커-컨테이너-접근하기"><a href="#외부에서-도커-컨테이너-접근하기" class="headerlink" title="외부에서 도커 컨테이너 접근하기"></a>외부에서 도커 컨테이너 접근하기</h1><p>컨테이너는 가상 머신과 마찬가지로 가상 IP 주소를 할당받습니다.<br>기본적으로 도커는 컨테이너에 172.17.0.x의 IP를 순차적으로 할당합니다.</p><p>컨테이너를 생성하고, ifconfig 명령어로 컨테이너의 네트워크 인터페이스를<br>확인하였습니다.</p><p><img src="https://user-images.githubusercontent.com/33755241/107226833-fa5f8980-6a5d-11eb-8e01-89c0a75dc31c.png" alt="스크린샷 2021-02-08 오후 10 3539"></p><p>도커의 NAT IP인 172.17.0.2를 할당받은 eth0 인터페이스와 로컬 호스트인 lo<br>인터페이스가 있습니다. 아무런 설정을 하지 않았다면 이 컨테이너는<br>외부에서 접근할 수 없으며 도커가 설치된 호스트에서만 접근할 수 있습니다.</p><p>외부에 컨테이너의 애플리케이션을 노출하기 위해서는 eth0의 IP와 포트를<br>호스트의 IP와 포트에 바인딩해야 합니다.</p><p>컨테이너에서 호스트를 빠져나온 뒤,</p><p><img src="https://user-images.githubusercontent.com/33755241/107227524-d486b480-6a5e-11eb-9d0f-a96e37747272.png" alt="스크린샷 2021-02-08 오후 10 4146"></p><p>-p 옵션을 추가하여 컨테이너를 생성했습니다. -p 옵션은 컨테이너의 포트를<br>호스트의 포트와 바인딩해 연결할 수 있게 설정합니다.</p><p><strong>[호스트의 포트]:[컨테이너의 포트]</strong></p><p>즉, 호스트의 포트 8000과 컨테이너의 포트 80번을 연결하려고 하면 8000:80<br>이렇게 입력하며 호스트의 특정 IP를 사용하려면 192.168.0.100:8000:80과<br>같이 바인딩할 IP와 포트를 명시합니다. 또한 여러개의 포트를 외부에<br>개방하려면 -p 옵션을 여러 번 써서 설정합니다.</p><p>+————————————–+————————————–+<br>|     1                                |     # docker run -i -t -p 3306:3306  |<br>|                                      | -p 7777:80 ubuntu:14.04              |<br>+————————————–+————————————–+</p><p>아파치 웹 서버는 기본적으로 80번 포트를 사용하므로 여기서는 컨테이너의<br>80번 포트를 호스트와 같이 연결합니다.</p><p><img src="https://user-images.githubusercontent.com/33755241/107230488-7cea4800-6a62-11eb-8ceb-61888737a19b.png" alt="image"></p><p>그리고 아래 명령어들로 아파치 서버를 시작합니다.</p><p>+————————————–+————————————–+<br>|     123                              |     root@9705c91b767b:/# apt-get upd |<br>|                                      | ateroot@9705c91b767b:/# apt-get inst |<br>|                                      | all apache2 -yroot@9705c91b767b:/# s |<br>|                                      | ervice apache2 start                 |<br>+————————————–+————————————–+</p><p><img src="https://user-images.githubusercontent.com/33755241/107235695-4c0d1180-6a68-11eb-985d-978dd28c388a.png" alt="스크린샷 2021-02-08 오후 11 4927"></p><p>아파치 서버가 실행이 완료되면, 호스트의 ip주소:7777(80) 으로 접근합니다.<br>아까 -p 7777:80 으로 연결을 시켜줬기 때문입니다. (호스트의 포트 7777은<br>도커의 포트 80번과 연결된다는 의미, 포트 80을 입력해도 연결됨)</p><p>아파치 웹 서버는 172 대역을 가진 컨테이너의 NAT IP와 80번 포트로<br>서비스하므로 여기에 접근하려면 172.17.0.x 와 포트 80번으로 접근해야<br>하지만, 포트포워딩 옵션인 -p로 호스트와 컨테이너를 연결했으므로 호스트의<br>ip를 통해 172.17.0.x:80으로 접근이 가능해 졌습니다.</p><hr><p>위키 북스의 시작하세요 도커/쿠버네티스를 읽고 작성하였습니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;외부에서-도커-컨테이너-접근하기&quot;&gt;&lt;a href=&quot;#외부에서-도커-컨테이너-접근하기&quot; class=&quot;headerlink&quot; title=&quot;외부에서 도커 컨테이너 접근하기&quot;&gt;&lt;/a&gt;외부에서 도커 컨테이너 접근하기&lt;/h1&gt;&lt;p&gt;컨테이너는 가상 머</summary>
      
    
    
    
    <category term="Docker" scheme="https://yuminee.github.io/categories/Docker/"/>
    
    
    <category term="docker" scheme="https://yuminee.github.io/tags/docker/"/>
    
    <category term="도커" scheme="https://yuminee.github.io/tags/%EB%8F%84%EC%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>컨테이너 목록 확인, 컨테이너 삭제</title>
    <link href="https://yuminee.github.io/2021/02/08/Docker/docker3/"/>
    <id>https://yuminee.github.io/2021/02/08/Docker/docker3/</id>
    <published>2021-02-08T06:55:16.000Z</published>
    <updated>2021-06-02T14:53:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="컨테이너-목록-확인-컨테이너-삭제"><a href="#컨테이너-목록-확인-컨테이너-삭제" class="headerlink" title="컨테이너 목록 확인, 컨테이너 삭제"></a>컨테이너 목록 확인, 컨테이너 삭제</h1><h3 id="컨테이너-목록-확인"><a href="#컨테이너-목록-확인" class="headerlink" title="컨테이너 목록 확인"></a>컨테이너 목록 확인</h3><p><strong>docker ps</strong> 명령어로 현재 실행중인 컨테이너 목록들을 확인 할 수<br>있습니다.</p><p><img src="https://user-images.githubusercontent.com/33755241/107140462-6f9b6380-6965-11eb-8fa6-cf2b3e2aba88.png" alt="스크린샷 2021-02-07 오후 4 5627"></p><p><strong>docker ps -a</strong> 명령어로는 정지된 컨테이너를 포함하여 모든 컨테이너의<br>목록들을 확인 할 수 있습니다.</p><p><img src="https://user-images.githubusercontent.com/33755241/107140481-9bb6e480-6965-11eb-98b5-945602f0b562.png" alt="스크린샷 2021-02-07 오후 4 5745"></p><p>docker ps 명령어의 출력에 대한 설명</p><ul><li>CONTAINER ID : 컨테이너에게 자동으로 할당되는 고유한 ID.<br>  <code>docker inspect</code> 명령어를 통해 전체 ID를 확인할 수 있습니다.</li><li>  IMAGE : 컨테이너를 생성할 때 사용되는 이미지의 이름</li><li>COMMAND : 컨테이너가 시작될 때 실행될 명령어. 대부분의 이미지에는<br>  미리 내장되어 있기 때문에 별도로 설정할 필요는 없습니다.</li><li>  CREATED : 컨테이너가 생성되고 난 뒤 흐른 시간을 나타냅니다.</li><li>STATUS : 컨테이너의 상태. 실행중일때는 <strong>Up</strong> , 종료된 상태인<br>  <strong>Exited</strong>, 일시 중시된 상태인 <strong>Pause</strong>등이 있습니다.</li><li>  PORTS : 컨테이너가 개방한 포트와 호스트에 연결한 포트.</li><li>  NAMES: 컨테이너 고유한 이름</li></ul><h3 id="컨테이너-삭제"><a href="#컨테이너-삭제" class="headerlink" title="컨테이너 삭제"></a>컨테이너 삭제</h3><p><img src="https://user-images.githubusercontent.com/33755241/107225467-2b3ebf00-6a5c-11eb-88ca-c24731749103.png" alt="스크린샷 2021-02-08 오후 10 2240"></p><p>컨테이너 삭제는 <strong>docker rm</strong> 명령어를 이용합니다. 위에서 ubuntu라는<br>이름의 컨테이너를 지우고 확인해 보기 위해 <strong>docker ps -a</strong>를<br>사용하였습니다.</p><p><img src="https://user-images.githubusercontent.com/33755241/107225607-5aedc700-6a5c-11eb-9be3-400a3eb172ce.png" alt="스크린샷 2021-02-08 오후 10 2402"></p><p>그런데 mycentos라는 이름의 컨테이너를 지우려고 하니 <strong>Stop the container<br>before attempting removal or force remove</strong> 라는 에러가 납니다.</p><p>실행중인 컨테이너는 삭제할 수 없으므로 컨테이너를 정지한 뒤 삭제하거나<br>강제로 삭제할 수 있는 옵션을 추가하라는 내용입니다.</p><p><img src="https://user-images.githubusercontent.com/33755241/107225870-b61fb980-6a5c-11eb-9246-583c06ad04b0.png" alt="스크린샷 2021-02-08 오후 10 2635"></p><p>그러므로 <strong>docker stop</strong> 으로 컨테이너를 멈춘뒤에 <strong>docker rm</strong> 으로<br>삭제 하도록 합니다.</p><p>혹은 <strong>docker rm -f [컨테이너이름]</strong> 으로 삭제할 수 있습니다.</p><p>도커 컨테이너를 일괄적으로 다 삭제하는 명령어는 <strong>prune</strong> 를 사용합니다.</p><p>+————————————–+————————————–+<br>|     1                                |     docker container prune           |<br>+————————————–+————————————–+</p><p>혹은, docker ps 명령어의 -a 옵션과 -q 옵션을 조합해 컨테이너를 삭제할<br>수도 있습니다.</p><p>+————————————–+————————————–+<br>|     1                                |     docker ps -a -q                  |<br>+————————————–+————————————–+</p><p>-a 는 컨테이너의 상태와 관계 없이 모든 컨테이너를, -q는 컨테이너의 ID만<br>출력하는 역활을 합니다.</p><p>이 옵션들을 사용해 출력된 컨테이너 리스트를 변수로 컨테이너를 삭제하면<br>모든 컨테이너를 간단히 삭제할 수 있습니다. 즉, 다음 명령어는 컨테이너의<br>실행 상태와 관계없이 모든 컨테이너를 정지하고 삭제합니다.</p><p>+————————————–+————————————–+<br>|     12                               |     # docker stop $(docker ps -a -q) |<br>|                                      | # docker rm $(docker ps -a -q)       |<br>+————————————–+————————————–+</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;컨테이너-목록-확인-컨테이너-삭제&quot;&gt;&lt;a href=&quot;#컨테이너-목록-확인-컨테이너-삭제&quot; class=&quot;headerlink&quot; title=&quot;컨테이너 목록 확인, 컨테이너 삭제&quot;&gt;&lt;/a&gt;컨테이너 목록 확인, 컨테이너 삭제&lt;/h1&gt;&lt;h3 id=</summary>
      
    
    
    
    <category term="Docker" scheme="https://yuminee.github.io/categories/Docker/"/>
    
    
    <category term="docker" scheme="https://yuminee.github.io/tags/docker/"/>
    
    <category term="도커" scheme="https://yuminee.github.io/tags/%EB%8F%84%EC%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker Engine (도커 엔진)?</title>
    <link href="https://yuminee.github.io/2021/02/07/Docker/docker2/"/>
    <id>https://yuminee.github.io/2021/02/07/Docker/docker2/</id>
    <published>2021-02-07T06:55:16.000Z</published>
    <updated>2021-06-02T14:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Engine-도커-엔진"><a href="#Docker-Engine-도커-엔진" class="headerlink" title="Docker Engine (도커 엔진)?"></a>Docker Engine (도커 엔진)?</h1><h3 id="도커-이미지와-컨테이너"><a href="#도커-이미지와-컨테이너" class="headerlink" title="도커 이미지와 컨테이너"></a>도커 이미지와 컨테이너</h3><p>도커 엔진에서 사용하는 기본 단위는 있다 <strong>이미지</strong>와 <strong>컨테이너</strong>이며, 이 두가지가 도커 엔진의 핵심입니다.</p><h3 id="도커-이미지"><a href="#도커-이미지" class="headerlink" title="도커 이미지"></a>도커 이미지</h3><p><strong>이미지는 컨테이너를 생성할 때 필요한 요소</strong>이며, 가상 머신을 생성할 때 사용하는 iso 파일과 비슷한 개념입니다. 이미지는 여러 개의 계층으로 된 바이너리 파일로 존재하고, 컨테이너를 생성하고 실행할 때 <strong>있는 읽기 전용</strong>으로 사용됩니다. 이미지는 도커 명령어로 내려받을 수 있으므로 별도로 설치할 필요는 없습니다.</p><p>도커에서 사용하는 이미지의 이름은 기본적으로 [저장소 이름]/[이미지 이름]:[태그]의 형태로 구성되어 있습니다.</p><p><img src="https://user-images.githubusercontent.com/33755241/107135224-326eab80-693c-11eb-8578-c06a5f6aba43.png" alt="이미지이름의구성"></p><ul><li><strong>저장소(Repository ) 이름</strong>은 이미지가 저장된 장소를 의미. 저장소 이름이 명시되지 않은 이미지는 도커에서 기본적으로 제공하는 이미지 저장소인 도커 허브(docker hub)의 공식(official) 이미지 입니다.</li><li><strong>이미지 이름</strong>은 해당 이미지가 어떤 역활을 하는지 나타냅니다. 위 예시에는 우분투 컨테이너를 생성하기 위한 이미지라는 것을 알 수 있습니다. </li><li><strong>태그</strong>는 이미지의 버전 관리, 혹은 리버전(Revision) 관리에 사용합니다. 일반적으로는 버전을 위와 같이 명시하지만, 적지 않는다면 이미지 태그는 latest로 인식합니다.</li></ul><h3 id="도커-컨테이너"><a href="#도커-컨테이너" class="headerlink" title="도커 컨테이너"></a>도커 컨테이너</h3><p>도커 이미지는 우분투, CentOS등 기본적인 리눅스 운영체제에서 부터 아파치 웹 서버, Mysql 데이터베이스 등등 여러가지 종류가 있습니다. 이러한 <strong>이미지로 컨테이너를 생성하면 해당 이미지의 목적에 맞는 파일이 들어 있는 파일 시스템과 격리된 시스템 자원 및 네트워크를 사용할 수 있는 독립된 공간이 생성</strong>되고 이것이 *<em>도커 컨테이너</em>입니다. </p><p>컨테이너는 이미지를 읽기 전용으로 사용하되 이미지에서 변경된 사항만 컨테이너 계층에 저장하므로 컨테이너는 무엇을 하든지 원래의 이미지에는 영향을 받지 않습니다. </p><h3 id="도커-컨테이너-다루기"><a href="#도커-컨테이너-다루기" class="headerlink" title="도커 컨테이너 다루기"></a>도커 컨테이너 다루기</h3><p>저는 지금 mac m1 을 사용하고 있어서 m1 버전으로 릴리즈된 docker를 최근에 설치하였습니다. </p><p><a href="https://docs.docker.com/docker-for-mac/apple-m1/">docker for m1 docs </a>에서 설치 방법을 확인 하실 수 있습니다!</p><h4 id="컨테이너-생성"><a href="#컨테이너-생성" class="headerlink" title="컨테이너 생성"></a>컨테이너 생성</h4><p><img src="https://user-images.githubusercontent.com/33755241/107135920-1f5eda00-6942-11eb-8004-e5b87da0a4c2.png" alt="도커버전확인">{:.alignleft}</p><p>위의 명령어로 도커의 버전을 확인 할 수 있고, 저렇게 버전이 나온다면 잘 설치가 된 것 입니다.</p><img width="565" alt="스크린샷 2021-02-07 오후 3 01 20" src="https://user-images.githubusercontent.com/33755241/107138058-5ee2f180-6955-11eb-83ec-ad662a465313.png"><p>docker run 명령어를 입력하면 보여지는 화면입니다. </p><p><code>docker run -i -t ubuntu:14.04</code></p><p>라는 명령어를 통해 컨테이너를 생성 및 샐행과 동시에 컨테이너 내부로 들어오게 됩니다. 컨테이너에서 기본 사용자는 root 이고, 호스트 이름은 무작위의 16진수 해시값입니다. 무작위의 16진수 해쉬값은 컨테이너의 고유한 ID의 앞 일부분이며, 위 예시에서는 65d9daa47df6 입니다.</p><p>docker run 명령어로 컨테이너를 생성할때 <strong>-i 명령어로 상호 입출력을, -t 명령어로 tty를 활설화해서 배시(bash) 셸을 사용하도록</strong> 컨테이너를 설정했습니다.</p><p>docker run 명령어에서 이 두 옵션중 하나라도 사용하지 않으면 셸을 정상적으로 사용할 수 없습니다.</p><img width="680" alt="스크린샷 2021-02-07 오후 3 07 51" src="https://user-images.githubusercontent.com/33755241/107138178-41625780-6956-11eb-9ca4-6ad49394de3f.png"><p>ls 명령어로 파일시스템을 확인해보면 아무것도 살치되지 않은 상태임을 확인할 수 있습니다.</p><p>컨테이너 내부에서 빠져 나오는 방법은</p><ul><li>exit 를 입력하거나,</li><li>Ctrl +D를 동시에 입력</li></ul><p>하는 것입니다.</p><img width="680" alt="스크린샷 2021-02-07 오후 3 11 46" src="https://user-images.githubusercontent.com/33755241/107138260-cea5ac00-6956-11eb-95d5-ffb2033ff737.png"><p>다른 방법으로 컨테이너를 정지하지 않고 빠져나오는 것으로 <code>Ctrl +P,Q</code> 를 입력하는 것입니다. <code>exit</code> 명령어는 배시 셸을 종료함으로써 컨테이너를 정지시킴과 동시에 컨테이너에서 빠져나오지만, Ctrl+ P,Q를 사용하면 단순히 컨테이너의 셸에서만 빠져나오기 때문에 컨테이너 애플리케이션을 개발하는 목적으로 컨테이너를 사용할 때는 이 방법을 많이 씁니다.</p><p>docker pull 명령어로 centos 이미지를 다운받아 보겠습니다.</p><img width="680" alt="스크린샷 2021-02-07 오후 3 21 46" src="https://user-images.githubusercontent.com/33755241/107138515-33153b00-6958-11eb-9ff4-2558c2c2d04a.png"><p>이미지가 잘 받아졌는지 확인하기 위해서 <strong>docker images</strong> 명령어를 사용합니다. 이 명령어는 도커 엔진에 존재하는 이미지의 목록을 출력합니다.</p><img width="680" alt="스크린샷 2021-02-07 오후 3 23 15" src="https://user-images.githubusercontent.com/33755241/107138563-68ba2400-6958-11eb-91c6-65f193954e80.png"><p>방금 내려받은 centos 이미지와 아까 전에 받은 ubuntu 이미지를 둘다 확인 할 수 있습니다.</p><p><code>docker create -i -t --name mycentos centos:7</code></p><img width="680" alt="스크린샷 2021-02-07 오후 3 24 39" src="https://user-images.githubusercontent.com/33755241/107138586-9b641c80-6958-11eb-8c2d-59329e5eab22.png"><p>위의 명령어는 다운받은 centos:7 이미지로 컨테이너를 생성하며, –name 옵션으로 컨테이너의 이름을 설정합니다. 저는 mycentos로 설정해 보았습니다.</p><img width="439" alt="스크린샷 2021-02-07 오후 3 35 09" src="https://user-images.githubusercontent.com/33755241/107138820-124de500-695a-11eb-8930-b9bad235d11b.png"><p>docker create 명령어는 컨테이너를 생성만 해주는 명령어 입니다. 그래서 start -&gt; attach를 사용하여 컨테이너를 시작하고 내부로 들어갑니다.</p><ul><li>start : 컨테이너 시작.</li><li>attach : 컨테이너 내부로 들어감.</li></ul><p>그럼 컨테이너를 생성하기 위해서, run , create, start 명령어를 사용했습니다. run 명령어는 pull,create,start 명령어를 일괄적으로 실행한 후 attach가 가능한 컨테이너라면 컨테이너 내부로 들어갑니다.</p><ul><li>run 명령어 : docker pull(이미지 없을 때) -&gt;  docker create -&gt; docker start -&gt; docker attach(-i -t 옵션을 사용했을 때)</li><li>create 명령어 : docker pull(이미지 없을 때) -&gt;  docker create</li></ul><hr><h3 id="컨테이너-이름-바꾸기"><a href="#컨테이너-이름-바꾸기" class="headerlink" title="컨테이너 이름 바꾸기"></a>컨테이너 이름 바꾸기</h3><p>컨테이너의 이름을 설정해주지 않으면 랜덤으로 이름이 설정되는데,</p><img width="433" alt="스크린샷 2021-02-07 오후 3 27 00" src="https://user-images.githubusercontent.com/33755241/107138656-ee3dd400-6958-11eb-964e-119c17b69ccb.png"><p>도커 dastboard를 보면 이름을 정해준 centos:7 로만든 컨테이너는 mycentos라고 되어있지만, 아까 그냥 만들어준 ubuntu는 awesome_mclean이라는 이름으로 정해져 있습니다(<del>개발자 이름일까요..?</del>) </p><p>위의 이름은 쉽게 바꾸어 줄 수 있습니다.</p><img width="626" alt="스크린샷 2021-02-07 오후 3 29 59" src="https://user-images.githubusercontent.com/33755241/107138720-5a203c80-6959-11eb-9bf7-73fbb95bf05f.png"><p>docker ps -a 로 컨테이너의 id를 조회를 한 뒤, </p><p><strong>docker rename [컨테이너id 앞4자리] [바꾸고싶은 이름]</strong></p><p>로 바꾸어 주면 됩니다. 꼭 컨테이너 id 앞 4자리 일 필요는 없고, 다른 컨테이너들과 구분 할 수 있을 정도만 입력해주면 됩니다.</p><img width="439" alt="스크린샷 2021-02-07 오후 3 32 12" src="https://user-images.githubusercontent.com/33755241/107138776-a8354000-6959-11eb-9806-87f839b62507.png"><p>위의 명령어로 우분투 컨테이너의 이름도 바꾸어 보았습니다.</p><hr><p>위키 북스의 시작하세요 도커/쿠버네티스를 읽고 작성하였습니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-Engine-도커-엔진&quot;&gt;&lt;a href=&quot;#Docker-Engine-도커-엔진&quot; class=&quot;headerlink&quot; title=&quot;Docker Engine (도커 엔진)?&quot;&gt;&lt;/a&gt;Docker Engine (도커 엔진)?&lt;/h1</summary>
      
    
    
    
    <category term="Docker" scheme="https://yuminee.github.io/categories/Docker/"/>
    
    
    <category term="docker" scheme="https://yuminee.github.io/tags/docker/"/>
    
    <category term="도커" scheme="https://yuminee.github.io/tags/%EB%8F%84%EC%BB%A4/"/>
    
    <category term="docker run" scheme="https://yuminee.github.io/tags/docker-run/"/>
    
    <category term="docker rename" scheme="https://yuminee.github.io/tags/docker-rename/"/>
    
    <category term="도커 컨테이너 생성" scheme="https://yuminee.github.io/tags/%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1/"/>
    
  </entry>
  
  <entry>
    <title>Docker란?</title>
    <link href="https://yuminee.github.io/2021/02/06/Docker/docker1/"/>
    <id>https://yuminee.github.io/2021/02/06/Docker/docker1/</id>
    <published>2021-02-06T09:52:05.000Z</published>
    <updated>2021-06-02T14:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker란"><a href="#Docker란" class="headerlink" title="Docker란?"></a>Docker란?</h1><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker?"></a>Docker?</h3><p>도커는 리눅스 컨테이너에 여러 기능을 추가함으로써 애플리케이션을 컨테이너로서 좀 더 쉽게 사용할 수 있게 만들어진 오픈소스 프로젝트이다.</p><p>기존의 가상화 기술은 하이퍼바이저를 이용해 여러 개의 운영체제를 하나의 호스트에서 생성해 사용하는 방식이였다. 이러한 여러 개의 운영체제는 가상 머신이라는 단위로 구별되고, 각 가상 머신에는 우분투(Ubuntu), CentOS등의 운영체제가 설치되서 사용된다. 하이퍼바이저에 의해 생성되고 관리되는 운영체제를 <code>게스트 운영체제</code> 라고 하며, 각 게스트 운영체제는 다른 게스트 운영체제와는 완전히 독립된 공간과 시스템 자원을 할당받아 사용한다.</p><p>이러한 가상화 방식의 대표적인 툴로는 Virtual Box, VMware 등이 있습니다. </p><p><img src="https://user-images.githubusercontent.com/33755241/107109981-7c498a00-6887-11eb-85be-87c4edcc28b8.jpeg" alt="KakaoTalk_Photo_2021-02-06-14-27-34"></p><p>가상머신은 하이퍼바이저를 반드시 거치기 때문에 일반 호스트에 비해 성능이 떨어지고, 가상머신은 게스트 운영체제 사용을 위한 라이브러리, 커널등을 전부 포함하기 때문에 배포를 위한 이미지를 만들었을때 이미지의 크기가 크다는 단점이 있다.</p><p>즉, <strong>완벽한 운영체제를 생성할 수 있다는 장점이 있지만, 일반 호스트에 비해 손실이 있을 수 있으며,  수 기가 바이트에 달하는 이미지를 애플리케이션으로 배포하기에는 부담스럽다.</strong></p><p>그에 반해, 도커 컨테이너는 가상화된 공간을 생성하기 위해 리눅스 자체 기능인 chroot, 네임스페이스(namespace),cgroup 을 사용하므로써 프로세스 단위의 격리환경을 만들기 때문에 성능 손실이 거의 없다. 컨테이너에 필요한 커널은 호스트의 커널을 공유해서 사용하며, 컨테이너 안에는 라이브러리와 실행파일만 존재한다. </p><p>즉, 있다 <strong>컨테이너를 이미지로 만들었을때 이미지의 용량이 가상 머신에 비해 대폭 줄어들고, 가상머신에 비해 빠르며, 성능 손실이 거의 없다.</strong></p><p>더 많은 장점들을 적어보자면,</p><ul><li><p>애플리케이션의 개발과 배포가 편해짐</p><p>도커 컨테이너는 호스트 OS위에서 실행되는 격리된 공간이다. 따라서 컨테이너 자체에 특별한 권한을 주지 않는 한, 컨테이너 내부에서 수많은 소프트웨어를 설치하고 설정 파일을 수정해도 호스트 OS에는 영향을 끼치지 않는다. 즉, 나만의 독립된 개발 환경을 보장받을 수 있다는 것이다.</p><p>또한 배포를 할려고 할때는 그 컨테이너를 <code>도커 이미지</code>라고 하ㄴ 일종의 패키지로 만들어 운영 서버에 전달하기만 하면 된다. 컨테이너에서 사용되던 운영 서버에 패키지를 설치할 필요도 없으며, 각종 라이브러리 설치 등으로 인한 의존성을 걱정할 필요도 없다. 서비스를 개발했을 때 사용했던 환경을 다른 서버에서도 컨테이너로서 똑같이 복제할 수 있기 때문에 개발/운영 환경에서의 통합이 가능해지기 때문이다.</p></li><li><p>여러 애플리케이션의 독립성과 확장성이 높아짐</p><p>소프트웨어의 여러 모듈이 상호 작용하는 로직을 하나의 프로그램 내에서 구동시키는 방식을 모놀리스(Monolith) 애플리케이션이라고 한다. 소규모 서비스에서는 이 방식이 어울릴지도 모르지만, 서비스의 기능이 복잡해지고 거대해질수록 소프트웨어 자체의 확장성과 유연성이 줄어든다는 단점이 있다. 이를 해결하기 위해 떠오른 개념이 바로 <code>마이크로 서비스</code>이다. </p><p>예를 들어 웹 서비스는 데이터베이스 컨테이너와 웹 서버 컨테이너로 분리할 수 있고, 웹 서비스에 부하가 발생할 시 마이크로서비스 구조의 웹 서버 컨테이너만을 동적으로 늘려서 부하를 분산할 수 있다. 또한 이미지를 독립적으로 관리하기 때문에 유지 보수도 용이해진다. 이와 같은 컨테이너 기반의 마이크로서비스는 개발자가 그 구조를 직접 구현하기 보다는 도커 스웜 모드, 쿠버네티스 등의 컨테이너 오케스트레이션 플랫폼을 통해 사용하는 것이 일반적이다. </p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker란&quot;&gt;&lt;a href=&quot;#Docker란&quot; class=&quot;headerlink&quot; title=&quot;Docker란?&quot;&gt;&lt;/a&gt;Docker란?&lt;/h1&gt;&lt;h3 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Docker" scheme="https://yuminee.github.io/categories/Docker/"/>
    
    
    <category term="docker" scheme="https://yuminee.github.io/tags/docker/"/>
    
    <category term="도커" scheme="https://yuminee.github.io/tags/%EB%8F%84%EC%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Build Blockchain with TypeScript 2</title>
    <link href="https://yuminee.github.io/2020/12/31/Blockchain/typescript2/"/>
    <id>https://yuminee.github.io/2020/12/31/Blockchain/typescript2/</id>
    <published>2020-12-31T06:00:01.000Z</published>
    <updated>2021-06-02T14:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Build-Blockchain-with-TypeScript-2"><a href="#Build-Blockchain-with-TypeScript-2" class="headerlink" title="Build Blockchain with TypeScript 2"></a>Build Blockchain with TypeScript 2</h1><p>이제 본격적으로 blockchain을 만들어 보자!</p><h3 id="1-Blockchain-구조"><a href="#1-Blockchain-구조" class="headerlink" title="1. Blockchain 구조"></a>1. Blockchain 구조</h3><p>Blockchain의 구조는 기본적으로,</p><ul><li>index</li><li>previous hash</li><li>hash</li><li>timestamp</li><li>data</li></ul><p>이렇게 5가지를 놓을 수 있다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> index : <span class="built_in">number</span>;</span><br><span class="line">   <span class="keyword">public</span> hash : <span class="built_in">string</span>;</span><br><span class="line">   <span class="keyword">public</span> previoushash :<span class="built_in">string</span>;</span><br><span class="line">   <span class="keyword">public</span> data :<span class="built_in">string</span>;</span><br><span class="line">   <span class="keyword">public</span> timestamp : <span class="built_in">number</span>;</span><br><span class="line">   <span class="title">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">      index:<span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">      hash:<span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">      previoushash:<span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">      data:<span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">      timestamp:<span class="built_in">number</span> </span></span><br><span class="line"><span class="params">      </span>)&#123;</span><br><span class="line">         <span class="built_in">this</span>.index =index;</span><br><span class="line">         <span class="built_in">this</span>.hash=hash;</span><br><span class="line">         <span class="built_in">this</span>.previoushash=previoushash;</span><br><span class="line">         <span class="built_in">this</span>.data = data;</span><br><span class="line">         <span class="built_in">this</span>.timestamp=timestamp     </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그것을 바탕으로 Block class와 생성자를 만들어주었다.</p><h3 id="2-gensisBlock-생성"><a href="#2-gensisBlock-생성" class="headerlink" title="2. gensisBlock 생성"></a>2. gensisBlock 생성</h3><p>블록체인에서 가장 첫번째 블럭인 <code>genesisBlock</code> 이라고 한다. 여기서는 하드코딩으로 제네시스블럭을 만들어줄려고 한다. </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gensisBlock:Block = <span class="keyword">new</span> Block(<span class="number">0</span>, <span class="string">&quot;202020202020&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;this is a gensisBlock&quot;</span>, <span class="number">123456</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>들어가는 인자는 <code>class Block</code>의 생성자의 순서대로 <code>index, hash, previoushash, data,timestamp</code>순이다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> blockchain:Block[] = [gensisBlock]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>blockchian 이라는 이름의 변수를 Block 클래스의 배열타입으로 선언해주면서, 아까 만들어두었던 gensisBlock을 첫번째로 넣어준다.</p><p><img src="https://user-images.githubusercontent.com/33755241/103353357-fb5edc00-4aeb-11eb-8dac-24636176a071.png" alt="image"></p><p>만든 블럭을 console.log로 찍어보면 이렇게 나온다!</p><h3 id="3-Hash-값-계산"><a href="#3-Hash-값-계산" class="headerlink" title="3. Hash 값 계산!"></a>3. Hash 값 계산!</h3><p>블록체인의 블럭은 직전 블록의 해쉬값과, 현재 블록의 정보로 만들어진 해쉬값이 존재한다.</p><p>나는 블록의 해쉬값을 계산하는 함수를 static으로 block 클래스 안에 만들어주었다.</p><p>먼저 SHA256을 계산하기 위해</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add crypto-js</span><br></pre></td></tr></table></figure><p>로 설치를 해준후에, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import * as CryptoJS from &quot;crypto-js&quot;</span><br></pre></td></tr></table></figure><p>파일의 제일 윗 부분에 crypto-js를 import 해준다.</p><p>그리고 난뒤에 아래 함수처럼 hash값을 계산한다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> calculateBlockHash = (</span><br><span class="line">   index:<span class="built_in">number</span>,</span><br><span class="line">   previoushash:<span class="built_in">string</span>,</span><br><span class="line">   timestamp:<span class="built_in">number</span>,</span><br><span class="line">   data:<span class="built_in">string</span></span><br><span class="line">):<span class="function"><span class="params">string</span>=&gt;</span></span><br><span class="line">   CryptoJS.SHA256(index + previoushash + timestamp + data).toString();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-새로운-블록-생성하기"><a href="#4-새로운-블록-생성하기" class="headerlink" title="4. 새로운 블록 생성하기"></a>4. 새로운 블록 생성하기</h3><p>새로운 블록을 생성하기 위해서는 직전 블록의 정보가 필요하다.</p><p>그래서 직전 블록을 얻어올 수 있는 함수를 먼저 하나 만들고, 타임스탬프를 찍어주는 함수도 만들것이다.</p><p>아래와 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const getLatesBlock &#x3D; () :Block &#x3D;&gt; blockchain[blockchain.length-1];</span><br><span class="line">&#x2F;&#x2F;진전 블록의 정보를 얻어온다. </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const getNewTimeStamp &#x3D; ():number &#x3D;&gt; Math.round(new Date().getTime()&#x2F;1000);</span><br><span class="line">&#x2F;&#x2F;타임스탬프값을 계산한다.</span><br></pre></td></tr></table></figure><p>그리고 블록을 생성하는 함수를 작성한다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createNewBlock = (data:<span class="built_in">string</span>) : <span class="function"><span class="params">Block</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> previousBlock : Block = getLatesBlock();</span><br><span class="line">   <span class="keyword">const</span> newIndex : <span class="built_in">number</span> = previousBlock.index + <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">const</span> newTimestamp : <span class="built_in">number</span> = getNewTimeStamp();</span><br><span class="line">   <span class="keyword">const</span> newtHash : <span class="built_in">string</span> = Block.calculateBlockHash(</span><br><span class="line">      newIndex,</span><br><span class="line">      previousBlock.hash,</span><br><span class="line">      newTimestamp,</span><br><span class="line">      data</span><br><span class="line">      );</span><br><span class="line">   <span class="keyword">const</span> newBlock : Block = <span class="keyword">new</span> Block(</span><br><span class="line">      newIndex,</span><br><span class="line">      newtHash,</span><br><span class="line">      previousBlock.hash,</span><br><span class="line">      data,</span><br><span class="line">      newTimestamp</span><br><span class="line">      );</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> newBlock;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>getLatesBlock()을 이용하여 직전블록을 가져오고, 그 정보를 토대로 인덱스값을 증가시킨다.</p><p>getNewTimeStamp()를 이용하여 타임스탬프를 찍고 </p><p>calculateBlockHash( newIndex, previousBlock.hash,newTimestamp,data)를 이용하여 hash값을 계산한다.</p><h3 id="5-블록의-인증"><a href="#5-블록의-인증" class="headerlink" title="5. 블록의 인증"></a>5. 블록의 인증</h3><p>블록을 생성했다고해서 그냥 바로 체인에 넣을 수는 없다. 이 블록이 맞는 블록인지 확인을 해야한다.</p><p>그것을 위해 isBlockVaild()라는 함수를 만들었다. </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isBlockValid = (candidateBlock : Block, <span class="attr">previousBlock</span> : Block):<span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="function"><span class="title">if</span>(<span class="params">!Block.vaildBlockStructure(candidateBlock)</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">previousBlock.index + <span class="number">1</span> !== candidateBlock.index</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">previousBlock.hash !== candidateBlock.previoushash</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">getHashForBlock(candidateBlock) !== candidateBlock.hash </span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">   &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>위의 함수는 블럭 클래스의 candidateBlock과 preivousBlock 두개를 인자로 받는다. 그리고 boolean값을 리턴한다.</p><p>체크하는 부분은,</p><ol><li>해당 함수가 블럭의 구조를 가지고 있는가?</li><li>직전 블럭의 인덱스보다 +1 된 값의 인덱스를 가지고 있는가?</li><li>후보 블럭의 직전해쉬값은 직전블록의 해쉬값과 같은가?</li><li>후보 블럭의 해쉬값은 후보 블럭의 데이터로 해쉬를 계산했을때 같은 값인가?</li></ol><p>이렇게 4가지를 체크한다.</p><p>1번 부분을 체크하기 위해서</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> vaildBlockStructure = (aBlock:Block) : <span class="function"><span class="params">boolean</span> =&gt;</span></span><br><span class="line">    <span class="keyword">typeof</span> aBlock.index === <span class="string">&quot;number&quot;</span> &amp;&amp; </span><br><span class="line">    <span class="keyword">typeof</span> aBlock.hash ===<span class="string">&quot;string&quot;</span> &amp;&amp; </span><br><span class="line">    <span class="keyword">typeof</span> aBlock.previoushash === <span class="string">&quot;string&quot;</span> &amp;&amp; </span><br><span class="line">    <span class="keyword">typeof</span> aBlock.timestamp === <span class="string">&quot;number&quot;</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> aBlock.data === <span class="string">&quot;string&quot;</span>;</span><br><span class="line">   <span class="title">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">      index:<span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">      hash:<span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">      previoushash:<span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">      data:<span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">      timestamp:<span class="built_in">number</span> </span></span><br><span class="line"><span class="params">      </span>)&#123;</span><br><span class="line"></span><br><span class="line">         <span class="built_in">this</span>.index =index;</span><br><span class="line">         <span class="built_in">this</span>.hash=hash;</span><br><span class="line">         <span class="built_in">this</span>.previoushash=previoushash;</span><br><span class="line">         <span class="built_in">this</span>.data = data;</span><br><span class="line">         <span class="built_in">this</span>.timestamp=timestamp     </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>해당 함수를 Block class안에 만들어주었다. </p><p>3번 부분을 체크하기 위해서</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getHashForBlock = (aBlock:Block) :<span class="function"><span class="params">string</span> =&gt;</span></span><br><span class="line"> Block.calculateBlockHash(</span><br><span class="line">    aBlock.index, </span><br><span class="line">    aBlock.previoushash, </span><br><span class="line">    aBlock.timestamp, </span><br><span class="line">    aBlock.data)</span><br></pre></td></tr></table></figure><p>해당 함수를 만들어주었다.</p><h3 id="6-Add-Block"><a href="#6-Add-Block" class="headerlink" title="6. Add Block!"></a>6. Add Block!</h3><p>블록 인증을 마치고나서는 체인에 블록을 추가해야한다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addBlock = (candiateBlock : Block) : <span class="function"><span class="params">void</span>=&gt;</span> &#123;</span><br><span class="line">   <span class="function"><span class="title">if</span>(<span class="params">isBlockValid(candiateBlock, getLatesBlock())</span>)</span>&#123;</span><br><span class="line">      blockchain.push(candiateBlock);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>위의 함수로 블록을 추가하고 위의 함수는,</p><p>createNewBlock(data:string):Block에 아래와 같이 추가한다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createNewBlock = (data:<span class="built_in">string</span>) : <span class="function"><span class="params">Block</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> previousBlock : Block = getLatesBlock();</span><br><span class="line">   <span class="keyword">const</span> newIndex : <span class="built_in">number</span> = previousBlock.index + <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">const</span> newTimestamp : <span class="built_in">number</span> = getNewTimeStamp();</span><br><span class="line">   <span class="keyword">const</span> newtHash : <span class="built_in">string</span> = Block.calculateBlockHash(</span><br><span class="line">      newIndex,</span><br><span class="line">      previousBlock.hash,</span><br><span class="line">      newTimestamp,</span><br><span class="line">      data</span><br><span class="line">      );</span><br><span class="line">   <span class="keyword">const</span> newBlock : Block = <span class="keyword">new</span> Block(</span><br><span class="line">      newIndex,</span><br><span class="line">      newtHash,</span><br><span class="line">      previousBlock.hash,</span><br><span class="line">      data,</span><br><span class="line">      newTimestamp</span><br><span class="line">      );</span><br><span class="line">   </span><br><span class="line">   addBlock(newBlock);</span><br><span class="line">   <span class="keyword">return</span> newBlock;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-블록-만들고-console-log"><a href="#7-블록-만들고-console-log" class="headerlink" title="7. 블록 만들고 console.log!"></a>7. 블록 만들고 console.log!</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">createNewBlock(<span class="string">&quot;second block&quot;</span>);</span><br><span class="line">createNewBlock(<span class="string">&quot;third block&quot;</span>);</span><br><span class="line">createNewBlock(<span class="string">&quot;fourth block&quot;</span>);</span><br></pre></td></tr></table></figure><p>그 다음 <code>console.log(bolckchain)</code> 으로 결과를 확인하면, </p><p><img src="https://user-images.githubusercontent.com/33755241/103410544-1cd4cc00-4baf-11eb-93d7-f9dc7f5223f4.png" alt="image"></p><p>다음과 같은 결과를 확인 할 수 있다!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Build-Blockchain-with-TypeScript-2&quot;&gt;&lt;a href=&quot;#Build-Blockchain-with-TypeScript-2&quot; class=&quot;headerlink&quot; title=&quot;Build Blockchain with Ty</summary>
      
    
    
    
    <category term="Blockchain" scheme="https://yuminee.github.io/categories/Blockchain/"/>
    
    
    <category term="typescript" scheme="https://yuminee.github.io/tags/typescript/"/>
    
    <category term="Blockchain" scheme="https://yuminee.github.io/tags/Blockchain/"/>
    
    <category term="블록체인" scheme="https://yuminee.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
  </entry>
  
  <entry>
    <title>Build Blockchain with TypeScript 1</title>
    <link href="https://yuminee.github.io/2020/12/30/Blockchain/typescript1/"/>
    <id>https://yuminee.github.io/2020/12/30/Blockchain/typescript1/</id>
    <published>2020-12-30T06:00:01.000Z</published>
    <updated>2021-06-02T14:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>타입스크립트로 블록체인을 간단하게 만들어보기 위해서 타입스크립트의 기초 문법을 공부했다.</p><p>아래 명령어로 typescript와 tsc-watch를 설치해준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn global add typescript</span><br><span class="line">yarn add tsc-watch --dev &#x2F;&#x2F;nodem.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|-- dist&#x2F;</span><br><span class="line">|-- index.js &#x2F;&#x2F;(컴파일 후 생김)</span><br><span class="line">|-- index.js.map &#x2F;&#x2F;(컴파일 후 생김)</span><br><span class="line">|-- src&#x2F;</span><br><span class="line">|-- index.ts</span><br><span class="line">|-- package.json</span><br><span class="line">|-- tsconfig.json</span><br></pre></td></tr></table></figure><h3 id="1-yarn-init"><a href="#1-yarn-init" class="headerlink" title="1. yarn init"></a>1. yarn init</h3><p>자바스크립트의 프로젝트와 마찬가지로 yarn init(npm init)등을 이용해서 package.json을 만들어준다.  </p><h3 id="2-tsconfig-json"><a href="#2-tsconfig-json" class="headerlink" title="2. tsconfig.json"></a>2. tsconfig.json</h3><p>작업 디렉토리에서 타입스크립트 설정을 위해 tsconfig.json이라는 파일을 만들어주고,</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;src/**/*&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;exclude&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;node_modules&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>먼저 <code>compilerOptions</code> 부분은 컴파일로 옵션이다.  </p><p><strong>module</strong> : 묘듈 코드 생성 지정.</p><p><strong>target</strong> : ECMAScript 대상 버전 지정. 기본값은 <code>ES3</code></p><p><strong>sourceMap</strong> : 해당하는 .map파일을 생성할지 여부. true니까 .map파일을 생성한다.</p><p><strong>outDir</strong> : 출력 구조를 디렉토리로 리다이렉트 함. 해당 프로젝트에서는 dist안에 출력된 .map 과 js 파일이 생성됨.</p><p><strong>include</strong> : src 파일아래에서 작업을 할 것 이고, 그 밑으로 전부 컴파일.</p><p><strong>exclude</strong> : 해당 프로젝트에서는 node_modules를 사용하지 않을 것 이므로, 제외함.</p><h3 id="3-package-json-수정"><a href="#3-package-json-수정" class="headerlink" title="3. package.json 수정"></a>3. package.json 수정</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;typeChain&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;repository&quot;</span>: <span class="string">&quot;https://github.com/yuminee/typeChain.git&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;yuminee &lt;ayuminee2@gmail.com&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;tsc-watch --onSuccess \&quot;node dist/index.js\&quot; &quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;tsc-watch&quot;</span>: <span class="string">&quot;^4.2.9&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span>: <span class="string">&quot;^4.1.3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>위의 script 부분을 주목하자.   앞으로는 <code>yarn start</code>를 실행하면 수정되는 상황이 바로바로</p><p>컴파일 되어 결과를 확인 할 수 있다. </p><p>만약 tsc 관련해서 오류가 난다면, <code>yarn add typescript</code>로 설치를 하고 실행하면 될 것 이다.</p><h3 id="4-index-ts"><a href="#4-index-ts" class="headerlink" title="4. index.ts"></a>4. index.ts</h3><p>기초 문법을 학습하기 위해 index.ts를 생성했다. js를 할 줄 안다는 가정하에 typescript를 간단하게만 설명할 예정이다.</p><ul><li><p>alert(“aaa”)</p><p>이런식으로 프린트문을 작성한다.</p></li><li><p>class를 만들 수 있다.</p><ul><li><p>Human 이라는 클래스를 만든다면,</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> name :<span class="built_in">string</span>;</span><br><span class="line">   <span class="keyword">public</span> age : <span class="built_in">number</span>;</span><br><span class="line">   <span class="keyword">public</span> gender : <span class="built_in">string</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age:<span class="built_in">number</span>, gender:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">      <span class="built_in">this</span>.gender = gender;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>class안의 접근 지정자를 설정해 줄 수 있다. public으로 선언하면 클래스 밖에서도 접근이 가능하지만 만약에 private으로 선언하면 class안에서만 접근이 가능 할 것 이다.</p><p>또한 타입스크립트라는 이름에 맞게, 타입도 설정해 줄 수 있다.</p><p>constructor 부분은 생성자다.</p></li><li><p>class를 기반으로 객체 생성</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> youmin = <span class="keyword">new</span> Human(<span class="string">&quot;youmin&quot;</span>, <span class="number">26</span>,<span class="string">&quot;famale&quot;</span>)</span><br></pre></td></tr></table></figure><p>이런식으로 Human 클래스의 객체를 생성한다. 만약 저기서 파라메타들의 타입이 틀리거나 파라메타의 갯수가 다르다면 에러가 난다.</p></li><li><p>함수로 만들어서 사용해보기!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHi = (person :Human):<span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;person.name&#125;</span>, you are <span class="subst">$&#123;person.age&#125;</span> a <span class="subst">$&#123;person.gender&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sayHi라는 함수를 만들었다. Human 클래스의 타입인 person을 인자로 받고, string을 리턴하는 모습이다. </p></li><li><p>(다른 상황) 인자를 받거나 안받거나!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHi = (name, age, gender?):<span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;person.name&#125;</span>, you are <span class="subst">$&#123;person.age&#125;</span> a <span class="subst">$&#123;person.gender&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 함수에서는 gender뒤에 ?가 붙은것을 볼 수 있다. 정말 좋은 기능중에 하나라고 생각이 드는데 ?를 뒤에 붙이면 인자로 받지 않아도 된다.</p></li></ul></li><li><p>export{}</p><p>마지막에 export{}  를 해서 내보내야한다.</p></li></ul><h3 id="5-전체-코드"><a href="#5-전체-코드" class="headerlink" title="5. 전체 코드"></a>5. 전체 코드</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> name :<span class="built_in">string</span>;</span><br><span class="line">   <span class="keyword">public</span> age : <span class="built_in">number</span>;</span><br><span class="line">   <span class="keyword">public</span> gender : <span class="built_in">string</span>;</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age:<span class="built_in">number</span>, gender:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">      <span class="built_in">this</span>.gender = gender;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> youmin = <span class="keyword">new</span> Human(<span class="string">&quot;youmin&quot;</span>, <span class="number">26</span>,<span class="string">&quot;famale&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayHi = (person :Human):<span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;person.name&#125;</span>, you are <span class="subst">$&#123;person.age&#125;</span> a <span class="subst">$&#123;person.gender&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sayHi(youmin));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>다음 포스트에서는 타입스크립트를 이용하여 블록체인을 만들어보겠다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;타입스크립트로 블록체인을 간단하게 만들어보기 위해서 타입스크립트의 기초 문법을 공부했다.&lt;/p&gt;
&lt;p&gt;아래 명령어로 typescript와 tsc-watch를 설치해준다.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="Blockchain" scheme="https://yuminee.github.io/categories/Blockchain/"/>
    
    
    <category term="typescript" scheme="https://yuminee.github.io/tags/typescript/"/>
    
    <category term="Blockchain" scheme="https://yuminee.github.io/tags/Blockchain/"/>
    
    <category term="블록체인" scheme="https://yuminee.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
  </entry>
  
  <entry>
    <title>UFO Project 6 - Hyperledger Fabric SDK + application (2)</title>
    <link href="https://yuminee.github.io/2020/12/03/Hyperledger%20fabric/ufoserversdk2/"/>
    <id>https://yuminee.github.io/2020/12/03/Hyperledger%20fabric/ufoserversdk2/</id>
    <published>2020-12-03T06:45:26.000Z</published>
    <updated>2021-06-02T14:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UFO-PROJECT-6-Hyperledger-Fabric-SDK-application-2"><a href="#UFO-PROJECT-6-Hyperledger-Fabric-SDK-application-2" class="headerlink" title="UFO PROJECT 6 - Hyperledger Fabric SDK + application (2)"></a>UFO PROJECT 6 - Hyperledger Fabric SDK + application (2)</h1><p>체인코드 각각의 함수들을 불러 올 수 있게 app.js를 먼저 작성한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> network = <span class="built_in">require</span>(<span class="string">&#x27;./fabric/network.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; response &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(morgan(<span class="string">&#x27;combined&#x27;</span>))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line">app.use(cors())</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">8080</span>;</span><br><span class="line"><span class="keyword">const</span> HOST = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>기본적으로 express로 port는 8080으로 열어서 테스트를 할 것 이다.</p><ul><li>app.js 의 initWallet</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/initWallet&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">    network.initWallet(req.body.id)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      res.send(response)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)  </span><br></pre></td></tr></table></figure><p>이렇게 initWallet를 app.js에서 불러오면, </p><ul><li><p>network.js 의 initWallet 함수를 불러온다. 모바일 서버에서 id 값을 받으면 그 id 값에 대해 initWallet를 하는 것이므로 인자는 id 하나이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.initWallet = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> response = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new file system based wallet for managing identities.</span></span><br><span class="line">        <span class="keyword">const</span> walletPath = path.join(process.cwd(), <span class="string">&#x27;/wallet&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> wallet = <span class="keyword">new</span> FileSystemWallet(walletPath);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Wallet path: <span class="subst">$&#123;walletPath&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if we&#x27;ve already enrolled the user.</span></span><br><span class="line">        <span class="keyword">const</span> userExists = <span class="keyword">await</span> wallet.exists(userName);</span><br><span class="line">        <span class="keyword">if</span> (!userExists) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;An identity for the user &#x27;</span> + userName + <span class="string">&#x27; does not exist in the wallet&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Run the registerUser.js application before retrying&#x27;</span>);</span><br><span class="line">            response.error = <span class="string">&#x27;An identity for the user &#x27;</span> + userName + <span class="string">&#x27; does not exist in the wallet. Register &#x27;</span> + userName + <span class="string">&#x27; first&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new gateway for connecting to our peer node.</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;we here in initWallet&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> gateway = <span class="keyword">new</span> Gateway();</span><br><span class="line">        <span class="keyword">await</span> gateway.connect(connectionFile, &#123; wallet, <span class="attr">identity</span>: userName, <span class="attr">discovery</span>: gatewayDiscovery &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the network (channel) our contract is deployed to.</span></span><br><span class="line">        <span class="keyword">const</span> network = <span class="keyword">await</span> gateway.getNetwork(<span class="string">&#x27;ufochannel&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the contract from the network.</span></span><br><span class="line">        <span class="keyword">const</span> contract = network.getContract(<span class="string">&#x27;ufo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Submit the specified transaction.</span></span><br><span class="line">        <span class="comment">// initWallet transaction - requires 1 argument, ex: (&#x27;initWallet&#x27;, &#x27;11111111&#x27;)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> contract.submitTransaction(<span class="string">&#x27;initWallet&#x27;</span>, id);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Transaction has been submitted&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Disconnect from the gateway.</span></span><br><span class="line">        <span class="keyword">await</span> gateway.disconnect();</span><br><span class="line"></span><br><span class="line">        response.msg = <span class="string">&#x27;initWallet Transaction has been submitted&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> response;        </span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`Failed to submit transaction: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">        response.error = error.message;</span><br><span class="line">        <span class="keyword">return</span> response; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다른 chaincode의 함수들도 비슷한 방식으로 불러올 수 있다.</p><br><br><ul><li>app.js 의 getHistoryWallet이다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/getHistoryWallet&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  network.getHistoryWallet(req.body.id)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> walltHistory = <span class="built_in">JSON</span>.parse(response);        </span><br><span class="line">    res.send(Buffer.from(walltHistory).toString())</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>network.js의 getHistoryWallet 이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.getHistoryWallet = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> response = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new file system based wallet for managing identities.</span></span><br><span class="line">        <span class="keyword">const</span> walletPath = path.join(process.cwd(), <span class="string">&#x27;/wallet&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> wallet = <span class="keyword">new</span> FileSystemWallet(walletPath);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Wallet path: <span class="subst">$&#123;walletPath&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if we&#x27;ve already enrolled the user.</span></span><br><span class="line">        <span class="keyword">const</span> userExists = <span class="keyword">await</span> wallet.exists(userName);</span><br><span class="line">        <span class="keyword">if</span> (!userExists) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;An identity for the user &#x27;</span> + userName + <span class="string">&#x27; does not exist in the wallet&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Run the registerUser.js application before retrying&#x27;</span>);</span><br><span class="line">            response.error = <span class="string">&#x27;An identity for the user &#x27;</span> + userName + <span class="string">&#x27; does not exist in the wallet. Register &#x27;</span> + userName + <span class="string">&#x27; first&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new gateway for connecting to our peer node.</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;we here in getHistoryWallet&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> gateway = <span class="keyword">new</span> Gateway();</span><br><span class="line">        <span class="keyword">await</span> gateway.connect(connectionFile, &#123; wallet, <span class="attr">identity</span>: userName, <span class="attr">discovery</span>: gatewayDiscovery &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the network (channel) our contract is deployed to.</span></span><br><span class="line">        <span class="keyword">const</span> network = <span class="keyword">await</span> gateway.getNetwork(<span class="string">&#x27;ufochannel&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the contract from the network.</span></span><br><span class="line">        <span class="keyword">const</span> contract = network.getContract(<span class="string">&#x27;ufo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Submit the specified transaction.</span></span><br><span class="line">        <span class="comment">// initWallet transaction - requires 1 argument, ex: (&#x27;initWallet&#x27;, &#x27;11111111&#x27;)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> contract.evaluateTransaction(<span class="string">&#x27;getHistory&#x27;</span>, id);</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Disconnect from the gateway.</span></span><br><span class="line">        <span class="keyword">await</span> gateway.disconnect();</span><br><span class="line">     </span><br><span class="line">        <span class="built_in">console</span>.log( Buffer.from(result).toString());</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`Failed to submit transaction: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">        response.error = error.message;</span><br><span class="line">        <span class="keyword">return</span> response; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>이 함수는 다른 initWallet, deleteWallet 등등과의 차이점이 있는데 result를 return 한다는 것이다. 체인코드에서 데이터를  buffer로 받아오는데 단순히 데이터를 parse 하니 읽을 수 없는 형태로 데이터가 반환되었다.</p><p>그래서 찾은것이</p></li></ul><p>  <strong>Buffer.from(result).toString()</strong> 이다.  </p><p>  전체 코드는 <a href="https://github.com/yuminee/UFO_FabricNet_raft/tree/main/wep-app/server">GIT</a>에서 확인 할 수 있다.</p><hr><p>모바일에서 보기 편하게 md 파일을 작성 했다.</p><h2 id="HFB-Server"><a href="#HFB-Server" class="headerlink" title="HFB Server"></a>HFB Server</h2><h3 id="ChainCode-invoke"><a href="#ChainCode-invoke" class="headerlink" title="ChainCode invoke"></a>ChainCode invoke</h3><h4 id="Json-key-value-형식"><a href="#Json-key-value-형식" class="headerlink" title="Json key:value 형식"></a>Json key:value 형식</h4><ul><li><p>initWallet</p><ul><li>POST /initWallet </li></ul><table><thead><tr><th>key</th><th>value</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>String</td><td>받은 id 값으로 Token을 0으로 초기화 하여 지갑 생성</td></tr></tbody></table></li></ul><ul><li><p>getBalance</p><ul><li><p>POST /getBalance</p><table><thead><tr><th>key</th><th>value</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>String</td><td>받은 id 값의 Token return</td></tr></tbody></table></li></ul></li></ul><ul><li><p>deleteWallet</p><ul><li><p>POST /deleteWallet</p><table><thead><tr><th>key</th><th>value</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>String</td><td>받은 id값의 wallet 지움</td></tr></tbody></table></li></ul></li></ul><ul><li><p>chargeMoney</p><ul><li><p>POST /chargeMoney</p><table><thead><tr><th>key</th><th>value</th><th>Description</th></tr></thead><tbody><tr><td>id</td><td>String</td><td>충전할 Wallet의 id</td></tr><tr><td>amount</td><td>String</td><td>충전할 금액</td></tr></tbody></table></li></ul></li></ul><ul><li><p>transferMoney</p><ul><li><p>POST /transferMoney</p><table><thead><tr><th>key</th><th>value</th><th>Description</th></tr></thead><tbody><tr><td>sender</td><td>String</td><td>보내는 wallet Id</td></tr><tr><td>receiver</td><td>String</td><td>받은 wallet Id</td></tr><tr><td>amount</td><td>String</td><td>sender 가 보내는 Token의 amount</td></tr></tbody></table></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UFO-PROJECT-6-Hyperledger-Fabric-SDK-application-2&quot;&gt;&lt;a href=&quot;#UFO-PROJECT-6-Hyperledger-Fabric-SDK-application-2&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="hyperledger fabric" scheme="https://yuminee.github.io/categories/hyperledger-fabric/"/>
    
    
    <category term="블록체인" scheme="https://yuminee.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
    <category term="raft" scheme="https://yuminee.github.io/tags/raft/"/>
    
    <category term="blockchain" scheme="https://yuminee.github.io/tags/blockchain/"/>
    
    <category term="hyperledger fabric" scheme="https://yuminee.github.io/tags/hyperledger-fabric/"/>
    
    <category term="하이퍼레저 패브릭" scheme="https://yuminee.github.io/tags/%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A0%88%EC%A0%80-%ED%8C%A8%EB%B8%8C%EB%A6%AD/"/>
    
    <category term="fabric-client" scheme="https://yuminee.github.io/tags/fabric-client/"/>
    
    <category term="fabric sdk" scheme="https://yuminee.github.io/tags/fabric-sdk/"/>
    
  </entry>
  
  <entry>
    <title>UFO Project 5 - Hyperledger Fabric SDK + application (1)</title>
    <link href="https://yuminee.github.io/2020/12/02/Hyperledger%20fabric/ufoserversdk1/"/>
    <id>https://yuminee.github.io/2020/12/02/Hyperledger%20fabric/ufoserversdk1/</id>
    <published>2020-12-02T06:45:26.000Z</published>
    <updated>2021-06-02T14:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>체인코드를 기반으로 모바일과 통신하기 위한 서버가 필요하다. </p><h3 id="하이퍼레저-패브릭-SDK"><a href="#하이퍼레저-패브릭-SDK" class="headerlink" title="하이퍼레저 패브릭 SDK"></a>하이퍼레저 패브릭 SDK</h3><p> 하이퍼레저 패브릭 SDK를 통해 외부에서 하이퍼레저 패브릭 네트워크에 접속할 수 있다. </p><p><img src="https://user-images.githubusercontent.com/33755241/101305979-248ea280-3887-11eb-9de1-f83bb7438454.png" alt="image"></p><p>하이퍼레저 패브릭 SDK 는 크게 3가지 핵심모듈로 구성되는데.</p><ul><li><strong>Fabric-client</strong> : 하이퍼레저 패브릭 기반 블록체인 네트워크와 통신을 가능하게 하는 핵심 구성요소다. 피어, 오더러 관리 및 이벤트 처리 등 다양한 API를 제공한다. 새로운 채널 생성, 피어 노드의 채널 참여, 피어에 체인코드 설치 및 인스턴스화, 트랜잭션 제출, 트랜잭션 또는 블록의 원장 조회등.</li><li><strong>Fabric-CA-Client</strong>: 사용자 관리에 사용된다. 새로운 사용자 등록, 하이퍼레저 패브릭 서버에서 서명한 등록 인증서 발급, 기존 사용자 인증서 폐기등이 있다.</li><li><strong>Fabric-Network(API)</strong> : 플러그할 수 있는 구성 요소에 대한 API를 제공한다. SDK에서 사용하는 주요 인터페이스인 CryptoSuite, key, keyValueStore를 기본적으로 내장하고 있다.</li></ul><p>하이퍼레저 패브릭 SDK는 하이퍼레저 패브릭 네트워크와 gRPC를 통해 통신하는데, gRPC는 구글에서 개발한 HTTP 기반 RPC 프레임워크로, 더 적은 리소스를 통해 네트워크 통신의 효율성을 극대화해 성능을 강화한 통신 프로토콜이다.</p><p>먼저 hyperledger fabric server도 node js 로 작성 할 것이기 때문에, package.json을 작성해준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;server&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;.&#x2F;node_modules&#x2F;nodemon&#x2F;bin&#x2F;nodemon.js src&#x2F;app.js&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;body-parser&quot;: &quot;^1.18.3&quot;,</span><br><span class="line">    &quot;cors&quot;: &quot;^2.8.5&quot;,</span><br><span class="line">    &quot;express&quot;: &quot;^4.16.4&quot;,</span><br><span class="line">    &quot;fabric-ca-client&quot;: &quot;~1.4.0&quot;,</span><br><span class="line">    &quot;fabric-network&quot;: &quot;~1.4.0&quot;,</span><br><span class="line">    &quot;handlebars&quot;: &quot;^4.5.3&quot;,</span><br><span class="line">    &quot;js-yaml&quot;: &quot;^3.13.1&quot;,</span><br><span class="line">    &quot;morgan&quot;: &quot;^1.9.1&quot;,</span><br><span class="line">    &quot;nodemon&quot;: &quot;^1.18.9&quot;,</span><br><span class="line">    &quot;sed&quot;: &quot;0.0.1&quot;,</span><br><span class="line">    &quot;tar&quot;: &quot;&gt;&#x3D;2.2.2&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 난뒤 package.json이 있는 폴더에서 npm install을 하게되면 node_modules가 설치된다.</p><p>먼저 관리자를 등록해줘야 한다. 필요한 정보를 위해서 connection.yaml 과 config.json을 작성한다.</p><ul><li>config.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;connection_file&quot;</span>: <span class="string">&quot;connection.yaml&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;appAdmin&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;appAdminSecret&quot;</span>: <span class="string">&quot;adminpw&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;orgMSPID&quot;</span>: <span class="string">&quot;SalesMSP&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;caName&quot;</span>: <span class="string">&quot;ca.sales.ufo.com&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;userName&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gatewayDiscovery&quot;</span>: &#123; <span class="attr">&quot;enabled&quot;</span>: <span class="literal">false</span>, <span class="attr">&quot;asLocalhost&quot;</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>connetcion.yaml</p><p>해당 파일에는 채널, 조직, 피어들의 정보가 담겨있다. 전체 코드는 깃에서 확인 할 수 있다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="attr">ufochannel:</span></span><br><span class="line">    <span class="attr">orderers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer.ufo.com</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line">     </span><br></pre></td></tr></table></figure></li></ul><p>enrollAdmin.js라는 파일을 만든다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FabricCAServices = <span class="built_in">require</span>(<span class="string">&#x27;fabric-ca-client&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; FileSystemWallet, X509WalletMixin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fabric-network&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> yaml = <span class="built_in">require</span>(<span class="string">&#x27;js-yaml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// capture network variables from config.json</span></span><br><span class="line"><span class="keyword">const</span> configPath = path.join(process.cwd(), <span class="string">&#x27;config.json&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> configJSON = fs.readFileSync(configPath, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">JSON</span>.parse(configJSON);</span><br><span class="line"><span class="keyword">var</span> connection_file = config.connection_file;</span><br><span class="line"><span class="keyword">var</span> appAdmin = config.appAdmin;</span><br><span class="line"><span class="keyword">var</span> appAdminSecret = config.appAdminSecret;</span><br><span class="line"><span class="keyword">var</span> userName = config.userName;</span><br><span class="line"><span class="keyword">var</span> orgMSPID = config.orgMSPID;</span><br><span class="line"><span class="keyword">var</span> caName = config.caName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filePath = path.join(process.cwd(), <span class="string">&#x27;/connection.yaml&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> fileContents = fs.readFileSync(filePath, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> connectionFile = yaml.safeLoad(fileContents);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Create a new CA client for interacting with the CA.</span></span><br><span class="line">        <span class="keyword">const</span> caURL = connectionFile.certificateAuthorities[caName].url;</span><br><span class="line">        <span class="keyword">const</span> ca = <span class="keyword">new</span> FabricCAServices(caURL);</span><br><span class="line">        <span class="comment">// Create a new file system based wallet for managing identities.</span></span><br><span class="line">        <span class="keyword">const</span> walletPath = path.join(process.cwd(), <span class="string">&#x27;wallet&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> wallet = <span class="keyword">new</span> FileSystemWallet(walletPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if we&#x27;ve already enrolled the admin user.</span></span><br><span class="line">        <span class="keyword">const</span> adminExists = <span class="keyword">await</span> wallet.exists(userName);</span><br><span class="line">        <span class="keyword">if</span> (adminExists) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;An identity for the admin user &quot;admin&quot; already exists in the wallet&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Enroll the admin user, and import the new identity into the wallet.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> enrollment = <span class="keyword">await</span> ca.enroll(&#123; <span class="attr">enrollmentID</span>: appAdmin, <span class="attr">enrollmentSecret</span>: appAdminSecret &#125;);</span><br><span class="line">        <span class="keyword">const</span> identity = X509WalletMixin.createIdentity(orgMSPID, enrollment.certificate, enrollment.key.toBytes());</span><br><span class="line">        wallet.import(userName, identity);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;msg: Successfully enrolled admin user &#x27;</span> + userName + <span class="string">&#x27; and imported it into the wallet&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`Failed to enroll admin user: <span class="subst">$&#123;userName&#125;</span> <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">        process.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>처음 서버를 키고나서 generate 후에 만들어지는 key들을 위에서 만든 connection.yaml에 복사해서 가져와야 한다. 그것을 위해 sh 파일을 만들어 주었다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;printing keystore for Sales&#x27;</span></span><br><span class="line"></span><br><span class="line">ORG_1_KEYSTORE=$(ls ../../ufo-network/crypto-config/peerOrganizations/sales.ufo.com/users/Admin\@sales.ufo.com/msp/keystore/)</span><br><span class="line">ORG_2_KEYSTORE=$(ls ../../ufo-network/crypto-config/peerOrganizations/customer.ufo.com/users/Admin\@customer.ufo.com/msp/keystore/)</span><br><span class="line"></span><br><span class="line">ORG_1_PATH_TO_KEYSTORE=<span class="string">&quot;Admin@sales.ufo.com/msp/keystore/&quot;</span></span><br><span class="line">ORG_2_PATH_TO_KEYSTORE=<span class="string">&quot;Admin@customer.ufo.com/msp/keystore/&quot;</span></span><br><span class="line"></span><br><span class="line">UPDATED_KEYSTORE_ORG_1=<span class="string">&quot;<span class="variable">$ORG_1_PATH_TO_KEYSTORE</span><span class="variable">$ORG_1_KEYSTORE</span>&quot;</span></span><br><span class="line">UPDATED_KEYSTORE_ORG_2=<span class="string">&quot;<span class="variable">$ORG_2_PATH_TO_KEYSTORE</span><span class="variable">$ORG_2_KEYSTORE</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$UPDATED_KEYSTORE_ORG_1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sed -i &quot;s|keystore/.*|$&#123;UPDATED_KEYSTORE&#125;|g&quot; connection.yaml</span></span><br><span class="line"><span class="comment"># .* is regex-ese for &quot;any character followed by zero or more of any character(s)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;updating connection.yaml Sales adminPrivateKey path with&#x27;</span> <span class="variable">$&#123;UPDATED_KEYSTORE_ORG_1&#125;</span></span><br><span class="line"></span><br><span class="line">sed -i -e <span class="string">&quot;s|Admin@sales.ufo.com/msp/keystore/.*|<span class="variable">$UPDATED_KEYSTORE_ORG_1</span>|g&quot;</span> connection.yaml</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;updating connection.yaml Customer adminPrivateKey path with&#x27;</span> <span class="variable">$&#123;UPDATED_KEYSTORE_ORG_2&#125;</span></span><br><span class="line"></span><br><span class="line">sed -i -e <span class="string">&quot;s|Admin@customer.ufo.com/msp/keystore/.*|<span class="variable">$UPDATED_KEYSTORE_ORG_2</span>|g&quot;</span> connection.yaml</span><br></pre></td></tr></table></figure><p>그 후에 node enrollAdmin.js 를 하면, 지갑이 생성되었다는 log과 함께 wallet/admin이라는 폴더가 생성이 된다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;체인코드를 기반으로 모바일과 통신하기 위한 서버가 필요하다. &lt;/p&gt;
&lt;h3 id=&quot;하이퍼레저-패브릭-SDK&quot;&gt;&lt;a href=&quot;#하이퍼레저-패브릭-SDK&quot; class=&quot;headerlink&quot; title=&quot;하이퍼레저 패브릭 SDK&quot;&gt;&lt;/a&gt;하이퍼레저</summary>
      
    
    
    
    <category term="hyperledger fabric" scheme="https://yuminee.github.io/categories/hyperledger-fabric/"/>
    
    
    <category term="블록체인" scheme="https://yuminee.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
    <category term="raft" scheme="https://yuminee.github.io/tags/raft/"/>
    
    <category term="blockchain" scheme="https://yuminee.github.io/tags/blockchain/"/>
    
    <category term="hyperledger fabric" scheme="https://yuminee.github.io/tags/hyperledger-fabric/"/>
    
    <category term="하이퍼레저 패브릭" scheme="https://yuminee.github.io/tags/%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A0%88%EC%A0%80-%ED%8C%A8%EB%B8%8C%EB%A6%AD/"/>
    
    <category term="fabric-client" scheme="https://yuminee.github.io/tags/fabric-client/"/>
    
    <category term="fabric sdk" scheme="https://yuminee.github.io/tags/fabric-sdk/"/>
    
  </entry>
  
  <entry>
    <title>UFO Project 4 - Hyperledger Fabric Chain Code implementation in Node js (1)</title>
    <link href="https://yuminee.github.io/2020/12/01/Hyperledger%20fabric/ufochaincode1/"/>
    <id>https://yuminee.github.io/2020/12/01/Hyperledger%20fabric/ufochaincode1/</id>
    <published>2020-12-01T06:45:26.000Z</published>
    <updated>2021-06-02T14:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>지난 포스트에서 Node JS로 체인코드를 작성하는 방법에 대해 공부 했다. 그럼 이제 진짜 체인코드를 작성할 시간이다.</p><hr><h3 id="Directory-Structure-for-chain-code-implementation"><a href="#Directory-Structure-for-chain-code-implementation" class="headerlink" title="Directory Structure for chain code implementation"></a>Directory Structure for chain code implementation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd UFO_Fabric_raft #작업 디렉터리로 이동</span><br><span class="line">mkdir chaincode&#x2F;ufo&#x2F;javascript #체인코드 작업할 폴더 만들기</span><br><span class="line">cd chaincode&#x2F;ufo&#x2F;javascript # 체인코드 작업 폴더로 이동</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Package-json"><a href="#Package-json" class="headerlink" title="Package.json"></a>Package.json</h3><p>먼저, <code>npm init</code>을 통하여 package.json을 만들어 준다. </p><ul><li>package.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ufo&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;ufo chaincode in node js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;fabric-chaincode-node start&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;fabric-contract-api&quot;</span>: <span class="string">&quot;~1.4.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;fabric-shim&quot;</span>: <span class="string">&quot;~1.4.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>먼저 여기서 </p><ul><li><p><strong>“dependencies” : { “fabric-contract-api”,  “fabric-shim” }</strong></p></li><li><p><strong>“main” : “index.js”</strong> </p></li><li><p><strong>“scripts” : { start:”fabric-chaincode-node start}</strong> </p><p>위 세가지를 추가해준다.</p></li></ul><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><ul><li>index.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Ufo = <span class="built_in">require</span>(<span class="string">&#x27;./ufo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.Ufo = Ufo;</span><br><span class="line"><span class="built_in">module</span>.exports.contracts = [ Ufo ];</span><br></pre></td></tr></table></figure><p>위와 같은 방식으로 index.js를 작성해준다.</p><h3 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h3><p>위의 두개가 작성이 되었으면 package.json이 있는 폴더안에서 <code>npm install</code>을 진행한다. </p><h3 id="ufo-js"><a href="#ufo-js" class="headerlink" title="ufo.js"></a>ufo.js</h3><p>이제 본격적으로 ufo.js 라는 js파일을 만들어서 체인코드를 작성을 해볼 것이다. 지금 진행하고 있는 프로젝트는 UFO(Uni Festival in One)이라고 하여 전국 대학 축제를 소개하고, 하이퍼레저를 이용하여 결제 장부를 저장한다. </p><p>그래서 이 체인코드에서 필요한 함수들은,</p><ul><li><p>Init() : 체인코드 instantiate을 위해 넣어주었다. Transaction Id 를 console.info로 보여준다.</p></li><li><p>initWallet(id) : 사용자(id)가 가입을 하면 지갑을 생성하고,  balance를 0으로 초기화 해준다.</p></li><li><p>chargeMoney(id, amount) : 가입한 사용자의 id에 amount만큼의 돈을 충전한다.</p></li><li><p>getBalance(id) : 사용자(id)로 현재 잔액을 조회한다.</p></li><li><p>transferMoney(sender, receiver, amount) : sender는 receiver에게 amount만큼의 금액을 보낸다. </p></li><li><p>deleteWallet(id) : id로 지갑정보를 지운다(회원 탈퇴)</p></li><li><p>(작성중)changeOrg(파라메터 미정) : 이 프로젝트에는 sales와 customer 두개의 조직이 있는데,</p><ul><li>sales :  축제에서 판매를 하는 조직(노점, 주점등)</li><li>customer : 그 이외에 축제를 즐기는 모든 사람들</li></ul><p>이 어플리케이션에서는 A라는 축제에서는 sales였다가, B라는 축제에서는 customer일 경우인 사람이 있다. 이럴 경우 Org를 바꿔줘야 하기 때문에 추가했다.</p></li><li><p>(작성중)getWallet(id) : 사용자 id로 계좌의 내역을 확인한다.</p></li></ul><p>먼저 ufo.js의 require은,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shim = <span class="built_in">require</span>(<span class="string">&#x27;fabric-shim&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Contract &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fabric-contract-api&#x27;</span>);</span><br></pre></td></tr></table></figure><p>class 는 아래와 같이 작성한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ufo</span> <span class="keyword">extends</span> <span class="title">Contract</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Init"><a href="#Init" class="headerlink" title="Init()"></a>Init()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">Init</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">&#x27;=========== Instantiated Chaincode ===========&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">&#x27;Transaction ID: &#x27;</span> + ctx.stub.getTxID());</span><br><span class="line">        <span class="keyword">return</span> shim.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><pre><code>#### initWallet(id)</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">initWallet</span>(<span class="params">ctx, id</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">console</span>.info(<span class="string">&#x27;========== START : initWallet ===========&#x27;</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//Declare wallet</span></span><br><span class="line">       <span class="keyword">let</span> wallet = &#123;</span><br><span class="line"></span><br><span class="line">           ID:id,</span><br><span class="line">           Token:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">          &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">await</span> ctx.stub.putState(id,Buffer.from(<span class="built_in">JSON</span>.stringify(wallet)));</span><br><span class="line">       <span class="built_in">console</span>.log(wallet);</span><br><span class="line">       <span class="built_in">console</span>.info(<span class="string">&#x27;========== END : initWallet ===========&#x27;</span>)</span><br><span class="line">       </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>json 형식으로 wallet을 선언했다. 선언한 wallet에는 ID,Token 이 들어가있고 </p><p>인자로 들어오는 id를 ID 값에, Token 은 0으로 초기화 시켜준다. </p><h4 id="chargeMoney-id-amount"><a href="#chargeMoney-id-amount" class="headerlink" title="chargeMoney(id, amount)"></a>chargeMoney(id, amount)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">chargeMoney</span>(<span class="params">ctx, id, amount</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">&#x27;========== START : chargeMoney ===========&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> charger = id</span><br><span class="line">        <span class="keyword">const</span> walletAsBytes = <span class="keyword">await</span> ctx.stub.getState(charger);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!walletAsBytes || walletAsBytes.toString().length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;id&#125;</span> does not exist`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> walletInfo = &#123;&#125;;</span><br><span class="line">        walletInfo = <span class="built_in">JSON</span>.parse(walletAsBytes.toString());</span><br><span class="line">        <span class="built_in">console</span>.log(walletInfo)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> walletToken = <span class="built_in">parseInt</span>(walletInfo.Token);</span><br><span class="line">        amount = <span class="built_in">parseInt</span>(amount);</span><br><span class="line"></span><br><span class="line">        walletInfo.Token = (walletToken + amount).toString();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> updatedWalletAsBytes = <span class="built_in">JSON</span>.stringify(walletInfo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> ctx.stub.putState(charger, Buffer.from(updatedWalletAsBytes));</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">&#x27;========== END : chargeMoney ===========&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="getBalance-id"><a href="#getBalance-id" class="headerlink" title="getBalance(id)"></a>getBalance(id)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getBalance</span>(<span class="params">ctx, id</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">&#x27;========== START : getBalance ===========&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> walletId = id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> walletAsBytes = <span class="keyword">await</span> ctx.stub.getState(walletId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!walletAsBytes || walletAsBytes.toString().length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;id&#125;</span> does not exist`</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(walletAsBytes.toString());</span><br><span class="line">        walletInfo = <span class="built_in">JSON</span>.parse(walletAsBytes.toString());</span><br><span class="line">        walletToken = walletInfo.Token;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">&#x27;========== END : getBalance ===========&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> walletToken;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="transferMoney-sender-receiver-amount"><a href="#transferMoney-sender-receiver-amount" class="headerlink" title="transferMoney(sender, receiver, amount)"></a>transferMoney(sender, receiver, amount)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">transferMoney</span>(<span class="params">ctx, senderId, receiverId, amount</span>)</span>&#123;</span><br><span class="line">      </span><br><span class="line">       <span class="built_in">console</span>.info(<span class="string">&#x27;========== START : transferMoney ===========&#x27;</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">let</span> sender = senderId</span><br><span class="line">       <span class="keyword">let</span> receiver = receiverId</span><br><span class="line"></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;Sender :&quot;</span> + sender + <span class="string">&quot;, Receiver :&quot;</span> + receiver + <span class="string">&quot;, amount : &quot;</span> + amount);</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">       <span class="keyword">let</span> receiverAsBytes = <span class="keyword">await</span> ctx.stub.getState(receiver)</span><br><span class="line">       <span class="keyword">if</span> (!receiverAsBytes || receiverAsBytes.toString().length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;receiver&#125;</span> does not exist`</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> receiverInfo = &#123;&#125;;</span><br><span class="line">       receiverInfo = <span class="built_in">JSON</span>.parse(receiverAsBytes.toString());</span><br><span class="line">       <span class="keyword">let</span> receiverToken = <span class="built_in">parseInt</span>(receiverInfo.Token)</span><br><span class="line">           </span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> senderAsBytes = <span class="keyword">await</span> ctx.stub.getState(sender)</span><br><span class="line">       <span class="keyword">if</span> (!senderAsBytes || senderAsBytes.toString().length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;senderId&#125;</span> does not exist`</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> senderInfo = &#123;&#125;;</span><br><span class="line">       senderInfo = <span class="built_in">JSON</span>.parse(senderAsBytes.toString());</span><br><span class="line">       <span class="keyword">let</span> senderToken = <span class="built_in">parseInt</span>(senderInfo.Token)</span><br><span class="line">       </span><br><span class="line">       amount = <span class="built_in">parseInt</span>(amount)</span><br><span class="line">       <span class="keyword">if</span> (amount &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> shim.Error(<span class="string">&quot;you can&#x27;t transfer less than 0&quot;</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (amount &gt; senderToken) &#123;</span><br><span class="line">           <span class="keyword">return</span> shim.Error(<span class="string">`<span class="subst">$&#123;senderId&#125;</span> doesn&#x27;t have enough money to send`</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       receiverInfo.Token = (receiverToken + amount).toString();</span><br><span class="line">       senderInfo.Token = (senderToken - amount).toString();</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">var</span> updatedSenderAsBytes = <span class="built_in">JSON</span>.stringify(senderInfo);</span><br><span class="line">       <span class="keyword">var</span> updatedReceiverAsBytes = <span class="built_in">JSON</span>.stringify(receiverInfo);</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">await</span> ctx.stub.putState(sender, Buffer.from(updatedSenderAsBytes));</span><br><span class="line">       <span class="keyword">await</span> ctx.stub.putState(receiver,Buffer.from(updatedReceiverAsBytes));</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="deleteWallet-id"><a href="#deleteWallet-id" class="headerlink" title="deleteWallet(id)"></a>deleteWallet(id)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">deleteWallet</span>(<span class="params">ctx, id</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">&#x27;========== START : deleteWallet ===========&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> ctx.stub.deleteState(id); </span><br><span class="line">   </span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">&#x27;========== END : deleteWallet ===========&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>마지막으로,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = Ufo;</span><br></pre></td></tr></table></figure><p>해주면 된다.</p><h3 id="Package-ChainCode"><a href="#Package-ChainCode" class="headerlink" title="Package ChainCode"></a>Package ChainCode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec cli peer chaincode package -n ufo -l node -p &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;chaincode&#x2F;ufo&#x2F;javascript -v 0 -s -S ccpack.out</span><br></pre></td></tr></table></figure><p>위의 명령어를 통해서 체인코드를 패키징 해준다.</p><h3 id="ChainCode-install"><a href="#ChainCode-install" class="headerlink" title="ChainCode install"></a>ChainCode install</h3><p>우리는 총 2개의 조직에 각각 2개씩 4개의 피어가 있으므로 각각의 피어에 체인코드를 install 해준다.</p><ul><li><p>peer0.sales.ufo.com:7051</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -e CORE_PEER_LOCALMSPID&#x3D;SalesMSP -e CORE_PEER_ADDRESS&#x3D;peer0.sales.ufo.com:7051 -e CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;users&#x2F;Admin@sales.ufo.com&#x2F;msp -e CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;peers&#x2F;peer0.sales.ufo.com&#x2F;tls&#x2F;ca.crt cli peer chaincode install ccpack.out -l node</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>peer1.sales.ufo.com:8051</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -e CORE_PEER_LOCALMSPID&#x3D;SalesMSP -e CORE_PEER_ADDRESS&#x3D;peer1.sales.ufo.com:8051 -e CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;users&#x2F;Admin@sales.ufo.com&#x2F;msp -e CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;peers&#x2F;peer0.sales.ufo.com&#x2F;tls&#x2F;ca.crt cli peer chaincode install ccpack.out -l node</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>peer0.customer.ufo.com:9051</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -e CORE_PEER_LOCALMSPID&#x3D;CustomerMSP -e CORE_PEER_ADDRESS&#x3D;peer0.customer.ufo.com:9051 -e CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;customer.ufo.com&#x2F;users&#x2F;Admin@customer.ufo.com&#x2F;msp -e CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;customer.ufo.com&#x2F;peers&#x2F;peer0.customer.ufo.com&#x2F;tls&#x2F;ca.crt cli peer chaincode install ccpack.out -l node</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>peer1.customer.ufo.com:10051</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -e CORE_PEER_LOCALMSPID&#x3D;CustomerMSP -e CORE_PEER_ADDRESS&#x3D;peer1.customer.ufo.com:10051 -e CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;customer.ufo.com&#x2F;users&#x2F;Admin@customer.ufo.com&#x2F;msp -e CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;customer.ufo.com&#x2F;peers&#x2F;peer0.customer.ufo.com&#x2F;tls&#x2F;ca.crt cli peer chaincode install ccpack.out -l node</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="ChainCode-instantiate"><a href="#ChainCode-instantiate" class="headerlink" title="ChainCode instantiate"></a>ChainCode instantiate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -e CORE_PEER_LOCALMSPID&#x3D;SalesMSP -e CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;users&#x2F;Admin@sales.ufo.com&#x2F;msp cli peer chaincode instantiate -o orderer.ufo.com:7050 -C ufochannel -n ufo -l node -v 0 -c &#39;&#123;&quot;Args&quot;:[]&#125;&#39; -P &#39;AND(&#39;\&#39;&#39;SalesMSP.member&#39;\&#39;&#39;,&#39;\&#39;&#39;CustomerMSP.member&#39;\&#39;&#39;)&#39; --tls --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;ufo.com&#x2F;orderers&#x2F;orderer.ufo.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.ufo.com-cert.pem </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>이렇게 체인코드를 작성하고, 설치, 인스턴스화까지 했다. </p><h3 id="Invoke-ChainCode"><a href="#Invoke-ChainCode" class="headerlink" title="Invoke ChainCode"></a>Invoke ChainCode</h3><ul><li><p>initWallet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -e CORE_PEER_LOCALMSPID&#x3D;SalesMSP -e CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;users&#x2F;Admin@sales.ufo.com&#x2F;msp cli peer chaincode invoke -o orderer.ufo.com:7050 -C ufochannel -n ufo -c &#39;&#123;&quot;function&quot;:&quot;initWallet&quot;,&quot;Args&quot;:[&quot;2015116581&quot;]&#125;&#39; --waitForEvent --tls --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;ufo.com&#x2F;orderers&#x2F;orderer.ufo.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.ufo.com-cert.pem --peerAddresses peer0.sales.ufo.com:7051 --peerAddresses peer1.sales.ufo.com:8051 --peerAddresses peer0.customer.ufo.com:9051 --peerAddresses peer1.customer.ufo.com:10051 --tlsRootCertFiles &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;peers&#x2F;peer0.sales.ufo.com&#x2F;tls&#x2F;ca.crt --tlsRootCertFiles &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;peers&#x2F;peer0.sales.ufo.com&#x2F;tls&#x2F;ca.crt --tlsRootCertFiles &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;customer.ufo.com&#x2F;peers&#x2F;peer0.customer.ufo.com&#x2F;tls&#x2F;ca.crt --tlsRootCertFiles &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;customer.ufo.com&#x2F;peers&#x2F;peer0.customer.ufo.com&#x2F;tls&#x2F;ca.crt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>위에서 function에 initWallet를 Arg에 id 값을 넣어준다.</p><p><strong>‘{“function”:”initWallet”,”Args”:[“2015116581”]}’</strong></p><ul><li>Couchdb 화면</li></ul><p><img src="https://user-images.githubusercontent.com/33755241/101023683-751bac80-35b6-11eb-837a-9b125b1f0b56.png" alt="image"></p></li><li><p>chargeMoney</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -e CORE_PEER_LOCALMSPID&#x3D;SalesMSP -e CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;users&#x2F;Admin@sales.ufo.com&#x2F;msp cli peer chaincode invoke -o orderer.ufo.com:7050 -C ufochannel -n ufo -c &#39;&#123;&quot;Args&quot;:[&quot;chargeMoney&quot;,&quot;2015116581&quot;,&quot;5000&quot;]&#125;&#39; --waitForEvent --tls --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;ufo.com&#x2F;orderers&#x2F;orderer.ufo.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.ufo.com-cert.pem --peerAddresses peer0.sales.ufo.com:7051 --peerAddresses peer1.sales.ufo.com:8051 --peerAddresses peer0.customer.ufo.com:9051 --peerAddresses peer1.customer.ufo.com:10051 --tlsRootCertFiles &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;peers&#x2F;peer0.sales.ufo.com&#x2F;tls&#x2F;ca.crt --tlsRootCertFiles &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;peers&#x2F;peer0.sales.ufo.com&#x2F;tls&#x2F;ca.crt --tlsRootCertFiles &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;customer.ufo.com&#x2F;peers&#x2F;peer0.customer.ufo.com&#x2F;tls&#x2F;ca.crt --tlsRootCertFiles &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;customer.ufo.com&#x2F;peers&#x2F;peer0.customer.ufo.com&#x2F;tls&#x2F;ca.crt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>‘{“Args”:[“chargeMoney”,”2015116581”,”5000”]}’</strong></p><p>방금 가입한 “2015116581” 이라는 id에 “5000”만큼 충전한다.</p><ul><li><p>couchDB : Token이 0에서 5000으로 증가했다.</p><p><img src="https://user-images.githubusercontent.com/33755241/101023874-b3b16700-35b6-11eb-941a-d4b3e77df735.png" alt="image"></p></li></ul></li><li><p>transferMoney</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -e CORE_PEER_LOCALMSPID&#x3D;SalesMSP -e CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;users&#x2F;Admin@sales.ufo.com&#x2F;msp cli peer chaincode invoke -o orderer.ufo.com:7050 -C ufochannel -n ufo -c &#39;&#123;&quot;Args&quot;:[&quot;transferMoney&quot;,&quot;2015116581&quot;,&quot;20131111&quot;,&quot;1000&quot;]&#125;&#39; --waitForEvent --tls --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;ufo.com&#x2F;orderers&#x2F;orderer.ufo.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.ufo.com-cert.pem --peerAddresses peer0.sales.ufo.com:7051 --peerAddresses peer1.sales.ufo.com:8051 --peerAddresses peer0.customer.ufo.com:9051 --peerAddresses peer1.customer.ufo.com:10051 --tlsRootCertFiles &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;peers&#x2F;peer0.sales.ufo.com&#x2F;tls&#x2F;ca.crt --tlsRootCertFiles &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;sales.ufo.com&#x2F;peers&#x2F;peer0.sales.ufo.com&#x2F;tls&#x2F;ca.crt --tlsRootCertFiles &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;customer.ufo.com&#x2F;peers&#x2F;peer0.customer.ufo.com&#x2F;tls&#x2F;ca.crt --tlsRootCertFiles &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;customer.ufo.com&#x2F;peers&#x2F;peer0.customer.ufo.com&#x2F;tls&#x2F;ca.crt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>‘{“Args”:[“transferMoney”,”2015116581”,”20131111”,”1000”]}’</strong></p><p>아까 가입한 “2015116581” 에 추가적으로 “20131111” 이라는 id를 initWallet 해주었고</p><p>“20131111”에게 “2015116581” 이 “1000” 만큼 보낸다.</p><ul><li><p>CouchDB : 5000이 있었던 “2015116581” 은 1000을 보내서 4000이 되었고, </p><p>“20131111” 은 1000을 받아서 Token이 1000이 되었다.</p></li></ul><p><img src="https://user-images.githubusercontent.com/33755241/101024091-fa06c600-35b6-11eb-9b92-3f75b303abf9.png" alt="image"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;지난 포스트에서 Node JS로 체인코드를 작성하는 방법에 대해 공부 했다. 그럼 이제 진짜 체인코드를 작성할 시간이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Directory-Structure-for-chain-code-implementation&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="hyperledger fabric" scheme="https://yuminee.github.io/categories/hyperledger-fabric/"/>
    
    
    <category term="블록체인" scheme="https://yuminee.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
    <category term="raft" scheme="https://yuminee.github.io/tags/raft/"/>
    
    <category term="blockchain" scheme="https://yuminee.github.io/tags/blockchain/"/>
    
    <category term="hyperledger fabric" scheme="https://yuminee.github.io/tags/hyperledger-fabric/"/>
    
    <category term="하이퍼레저 패브릭" scheme="https://yuminee.github.io/tags/%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A0%88%EC%A0%80-%ED%8C%A8%EB%B8%8C%EB%A6%AD/"/>
    
    <category term="ChainCode" scheme="https://yuminee.github.io/tags/ChainCode/"/>
    
    <category term="ChainCode in node js" scheme="https://yuminee.github.io/tags/ChainCode-in-node-js/"/>
    
  </entry>
  
  <entry>
    <title>Start Developing Hyperledger Fabric Chaincode in Node.js</title>
    <link href="https://yuminee.github.io/2020/11/30/Hyperledger%20fabric/Chaincode_Nodejs/"/>
    <id>https://yuminee.github.io/2020/11/30/Hyperledger%20fabric/Chaincode_Nodejs/</id>
    <published>2020-11-30T04:59:44.000Z</published>
    <updated>2021-06-02T14:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>지난번 네트워크를 solo로 구성할때는 go로 체인코드를 작성 했었는데, 이번엔 나에게 조금더 친숙한 node js를 통해서 체인코드를 작성 할 것이다.  </p><p>node js 로 체인코드를 작성 해본 적이 없어서 자료를 찾아보다 미디움에서 처음 작성할때 좋은 글이 있어서 가져왔다.</p><p><a href="https://medium.com/coinmonks/start-developing-hyperledger-fabric-chaincode-in-node-js-e63b655d98db">https://medium.com/coinmonks/start-developing-hyperledger-fabric-chaincode-in-node-js-e63b655d98db</a></p><h3 id="what-is-Chaincode-in-hyperledger-Facric-term"><a href="#what-is-Chaincode-in-hyperledger-Facric-term" class="headerlink" title="what is Chaincode in hyperledger Facric term?"></a>what is Chaincode in hyperledger Facric term?</h3><ul><li><p>하이퍼 레저에서 체인코드란?</p><p>하이퍼레저에서 체인코드는 어플리케이션이 원장과 어떻게 상호작용하는지에 대한 비지니스 로직을 구현하기 위해 네트워크 피어 위에서 실행되는 코드이다. 트렌젝션이 제안되면, 어떤 상태변경을 장부에 적용해야 할지를 결정하는 체인코드를 실행한다.  그래서 하이퍼레저에서 탈 중화화 어플리케이션을 개발하기 위해서 체인코드를 꼭 작성해야 한다.</p><br><p>체인코드는 Go, Nodejs, Java로 쓰여질 수 있다. 다른 두개의 언어에 비해 Node js 는 쉽게 이해하고 찾을 수 있는 언어이다. 하지만,  node js 체인코드는 하이퍼레저 패브릭의 다큐먼트에 정보가 거의 없어서 쓰고 배포하기 조금 까다롭다.  그래서 나는 node js 체인코드의 개념들과 간단한 체인코드를 작성과 배포를 위해 단계 단계로 설명할 것이다.</p><br><br></li></ul><h3 id="Hyperledger-Fabric-Database"><a href="#Hyperledger-Fabric-Database" class="headerlink" title="Hyperledger Fabric Database"></a>Hyperledger Fabric Database</h3><ul><li><p>하이러페저 패브릭 데이터베이스</p><p>체인코드 이야기로 넘어가기전에, 하이퍼레저 패브릭 네트워크에서 데이터는 어디에 저장되는지 보자. 하이퍼레저는 상태를 저장하기 위해 데이터 베이스에서 key-value를 쓴다. 기본적으로, 패브릭은 LevelDB를 쓴다. 이 DB는 키를 사용하여 쿼리할 수 있는 특정 객체의 이진 데이터를 가지고 있다. 기존 데이터베이스는 중앙에 있는것과 다르게, 블록체인 데이터베이스는 모든 피어마다 있다.  따라서 이것을 분산형 네트워크라고 부른다.</p><br><br><p>LevelDB말고 하이퍼레저 패브릭에서 사용하는 CouchDB라는 데이터 베이스가 있다. CouchDB는 옵션인 외부 플러그형 상태 데이터베이스 이다. LevelDB가 key-value 인거처럼, CouchDB도 체인코드로 모델링된 모든 이진 데이터들을 저장 할 수 있다. 그러나 JSON 저장소로써, CouchDB는 체인 코드 값(예: 자산)이 JSON 데이터로 모델링될 때 체인 코드 데이터에 대한 풍부한 쿼리를 추가로 가능하게 한다.</p><br><br></li></ul><h3 id="Chicncode-Components"><a href="#Chicncode-Components" class="headerlink" title="Chicncode Components"></a>Chicncode Components</h3><ul><li><p>체인코드 구성 요소</p><ol><li><p><strong>fabric-contract-api</strong> : 스마트 계약을 구현하기 위한 높은 수준의 계약 API(NPM 모듈로 제공)</p></li><li><p><strong>fabric-shim</strong>: 스마트 계약을 구현하기 위한 낮은 수준의 계약 API (NPM 모듈로 제공)</p><br><p>우리는 <strong>fabric-shim</strong>이 <strong>fabric-contract-api</strong>의 이전 버전이라고 생각 할 수 있다. 패브릭의 새로운 버전을 위해 높은 수준의 API를 사용하는것은 좋은 연습이다. 그러나 <strong>fabric-contract-api</strong>는 shim이 할 수 있는 모든것을 할 수 있다. 물론 더 많은것도 할 수 있다.</p></li><li><p>stub : <strong>fabric-contract-api</strong>의 인터페이스로, 원장(데이터베이스 상태)에 접속해 수정하는데 사용한다. 장부를 읽고 쓰기위한 체인코드의 메인 인터페이스이다. 어떻게 데이터를 읽고 쓸 수 있을까? Stub 인터페이스의 함수들을 ㅂ자.</p></li></ol></li></ul><h3 id="Common-Methods-in-stub-interface"><a href="#Common-Methods-in-stub-interface" class="headerlink" title="Common Methods in stub interface"></a>Common Methods in stub interface</h3><ul><li>Stub interface의 함수들<ol><li><strong>getState(k)</strong>: 이미 알고있듯이, 하이퍼레저 패브릭 데이터베이스는 key-value 조합으로 데이터를 저장한다. 이 함수는 ledger에서 데이터를 읽는다. k값을 넣고 k와 관련된 값들을 return한다.</li><li><strong>putState(k,v)</strong>: 이 함수는 ledger에 데이터를 저장한다. K를 key로, v를 value로 가진다. 더 쉽게 말하자면, 우리가 Alice의 나이를 장부에 저장하고자 한다면 Alice는 Key값이고 Age는 Value이다.</li><li><strong>deleteState(k)</strong>: 이 함수는 Key값 K와 관련된 Value를 장부에서 지운다.</li><li>g<strong>etStateByRange(k1,k9)</strong>: 이 방법은 장부의 키 집합에 걸쳐 범위 반복기를 리턴한다. startKey(k1) 부터 endKey(k9) 까지 반복하며, 두 키 사이의 모든 Key values를 리턴한다. 자바 스크립트의 반복문과 비슷하다. 만약 우리가 k1-k99까지의 키를 저장했다고 하였을때 우리는 간단히 이 메소드를 통해 Value값을 가져올 수 있다.</li><li><strong>getTxID()</strong>: 이 함수는발생한 트렌젝션의 트렌젝션 id를 반환한다. 트렌젝션 id는 체인 위에 모든 트렌젝션에서 유니크 하다(단 하나). 그래서 트렌젝션 id는 거래를 추적하는데 중요한 역활을 한다.</li><li><strong>getTxTimestamp()</strong> : 이 함수는 트렌젝션이 만들어진 시점의 타임 스탬프를 리턴한다. 트랜젝션 채널 해더로 부터 가져오며, 그러므로 클라이언트의 타임 스탬프를 나타낸다. 그리고 모든 엔도서들을 거쳐 같은 타임 스탬프 값을 가질 것 이다. </li></ol></li></ul><h3 id="Write-your-First-Chaincode"><a href="#Write-your-First-Chaincode" class="headerlink" title="Write your First Chaincode"></a>Write your First Chaincode</h3><p>체인코드를 node js로 작성하기 위해서는 package.json, index.js 같은 것들을만들어야 한다. </p><p>만약 package.json이 익숙하지 않다면,</p><ul><li>package.json<ul><li>프로젝트가 의존하는 패키지들의 리스트</li><li>프로젝트에서 사용하는 <a href="https://docs.npmjs.com/about-semantic-versioning">시멘팅 버전 규칙</a> 패키지들의 특정 버전 </li><li>빌드를 재현하고, 다른 개발자들에게 공유하기 쉽게 함</li></ul></li></ul><p>간단히, 우리 체인코드는 <strong>farbic-contract-api</strong>와 <strong>fabric-shom</strong> 모듈에 의존한다. 우리는 이 패키지들과 버전을 package.json에 언급할 것 이다. </p><p>또한 <strong>fabric-chaincode-node start</strong>를 우리의 start script에 더할 것이다. (체인코드를 피어에 설치하기 위해 필요)</p><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Test-Chaincode&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;my first exciting node.js chaincode on Hyperledger-fabric&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;engines&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;node&quot;</span>: <span class="string">&quot;&gt;=8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;npm&quot;</span>: <span class="string">&quot;&gt;=5&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint .&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;pretest&quot;</span>: <span class="string">&quot;npm run lint&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;nyc mocha --recursive&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;fabric-chaincode-node start&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;engineStrict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;Hyperledger&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;Apache-2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;fabric-contract-api&quot;</span>: <span class="string">&quot;~1.4.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fabric-shim&quot;</span>: <span class="string">&quot;~1.4.0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;chai&quot;</span>: <span class="string">&quot;^4.1.2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;^4.19.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;mocha&quot;</span>: <span class="string">&quot;^5.2.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;nyc&quot;</span>: <span class="string">&quot;^12.0.2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;sinon&quot;</span>: <span class="string">&quot;^6.0.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;sinon-chai&quot;</span>: <span class="string">&quot;^3.2.0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;nyc&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;exclude&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;coverage/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;test/**&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;reporter&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;text-summary&quot;</span>,</span><br><span class="line">            <span class="string">&quot;html&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;all&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;check-coverage&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;statements&quot;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">&quot;branches&quot;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">&quot;functions&quot;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">&quot;lines&quot;</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드를 잘 보았다면 **”mian” : “index.js”**이라는 줄이 있다. 무슨 의미냐면, 시작할때(체인코드설치하는 동안), npm 모듈은 index.js를 확인하고 피어들에 언급된 contract를 설치한다. 그래서 index.js는 contract를 모듈로 내보낸다.</p><p>여기 index.js 파일이다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> testContract = <span class="built_in">require</span>(’./logic’);</span><br><span class="line"><span class="built_in">module</span>.exports.contracts = [ testContract ];</span><br></pre></td></tr></table></figure><h4 id="The-Contract"><a href="#The-Contract" class="headerlink" title="The Contract:"></a>The Contract:</h4><p>우리의 비지니스 로직은 뭘까?</p><p><code>학생들의 점수를 더하기, 검색하기 그리고 지우기 </code></p><ol><li>장부에 점수들을 적는다. 그래서 우리는 체인코드 stub 인터페이스인 putState 함수를 쓸 것 이다.</li><li>데이터 읽기로 데이터를 검색한다. 그래서 우리는 getState 함수가 필요하다</li><li>데이터 지우기로 데이터를 지운다. 그래서 우리는 deleteState 함수가 필요하다</li></ol><p>체인코드는 <strong>fabric-contract-api</strong> 모듈에서 scope key 클래스 <strong>Contract</strong> 를 불러오는것으로 시작한다. 이 클래스는 write logic이 될 것 이다. 모든 체인코드 기능들은 이 라이브러리 클래스를 사용해야 한다.  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Contract&#125;=<span class="built_in">require</span>(’fabric-contract-api’);</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">testContract</span> <span class="keyword">extends</span> <span class="title">Contract</span> </span>&#123;</span><br><span class="line"><span class="comment">//Functions go here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Adding-Marks"><a href="#Adding-Marks" class="headerlink" title="Adding Marks:"></a>Adding Marks:</h4><p>우리는 value와 <strong>studentId</strong>를 키값으로 객체를 저장하고, 각각의 과목에 대한 학생들의 점수를 저장하는 자바 스크립트 객체를 만들 것이다. 서버를 통해 데이터를 데이터베이스로 보낼때, 데이터는 string 이여야 한다. 그래서 먼저 우리는 marks 객체를 **JSON.stringify()**를 통해 String 타입으로 바꿔준다. 그리고 데이터베이스에 바이너리 데이터로 보내기 위해 buffer를 적용한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">addMarks</span>(<span class="params">ctx,studentId,subject1,subject2,subject3</span>)</span> &#123; </span><br><span class="line">    <span class="keyword">let</span> marks=&#123;</span><br><span class="line">     subj1:subject1, </span><br><span class="line">     subj2:subject2,</span><br><span class="line">     subj3:subject3 </span><br><span class="line">     &#125;; </span><br><span class="line"><span class="keyword">await</span>  ctx.stub.putState(studentId,Buffer.from(<span class="built_in">JSON</span>.stringify(marks))); </span><br><span class="line"><span class="built_in">console</span>.log(’Student Marks added To the ledger Succesfully..’); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h4 id="Delete-Marks"><a href="#Delete-Marks" class="headerlink" title="Delete Marks"></a>Delete Marks</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">deleteMarks</span>(<span class="params">ctx,studentId</span>)</span> &#123;</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">await</span> ctx.stub.deleteState(studentId); </span><br><span class="line">   </span><br><span class="line"><span class="built_in">console</span>.log(’Student Marks deleted <span class="keyword">from</span> the ledger Succesfully..’);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><br><h4 id="Query-Student-Marks"><a href="#Query-Student-Marks" class="headerlink" title="Query Student Marks:"></a>Query Student Marks:</h4><p>우리는 이전의 addMarks() 함수를 통해 값을 buffer 형식으로 넣었다.  쿼리를 하면, buffer 형식으로 return 될 것 이다. 그래서 우리는 buffer를 string 타입으로, 그래서 원래의 자바 스크립트 객체로 parse 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">queryMarks</span>(<span class="params">ctx,studentId</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">let</span> marksAsBytes = <span class="keyword">await</span> ctx.stub.getState(studentId); </span><br><span class="line">     <span class="keyword">if</span> (!marksAsBytes || marksAsBytes.toString().length &lt;= <span class="number">0</span>) &#123; </span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(’Student <span class="keyword">with</span> <span class="built_in">this</span> Id does not exist: <span class="string">&#x27;); </span></span><br><span class="line"><span class="string">         &#125; </span></span><br><span class="line"><span class="string">    let marks=JSON.parse(marksAsBytes.toString()); </span></span><br><span class="line"><span class="string">    return JSON.stringify(marks); </span></span><br><span class="line"><span class="string">   &#125;</span></span><br></pre></td></tr></table></figure><br><br><h3 id="Final-Contract"><a href="#Final-Contract" class="headerlink" title="Final Contract"></a>Final Contract</h3><p>여기 final contract 가 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Contract&#125; = <span class="built_in">require</span>(<span class="string">&#x27;fabric-contract-api&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testContract</span> <span class="keyword">extends</span> <span class="title">Contract</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">queryMarks</span>(<span class="params">ctx,studentId</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> marksAsBytes = <span class="keyword">await</span> ctx.stub.getState(studentId); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!marksAsBytes || marksAsBytes.toString().length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Student with this Id does not exist: &#x27;</span>);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> marks=<span class="built_in">JSON</span>.parse(marksAsBytes.toString());</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(marks);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">addMarks</span>(<span class="params">ctx,studentId,subject1,subject2,subject3</span>)</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> marks=&#123;</span><br><span class="line"></span><br><span class="line">       subj1:subject1,</span><br><span class="line"></span><br><span class="line">       subj2:subject2,</span><br><span class="line"></span><br><span class="line">       subj3:subject3</span><br><span class="line"></span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> ctx.stub.putState(studentId,Buffer.from(<span class="built_in">JSON</span>.stringify(marks))); </span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Student Marks added To the ledger Succesfully..&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">deleteMarks</span>(<span class="params">ctx,studentId</span>)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">await</span> ctx.stub.deleteState(studentId); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Student Marks deleted from the ledger Succesfully..&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=testContract;</span><br></pre></td></tr></table></figure><p>이 체인코드를 테스트하고 설치하기 위해서, 나는 basic-network(single peer)를 사용할 것이다. 이 네트워크에서 우리는 <strong>mycc</strong>라는 이름의 체인코드를 <strong>peer0.org1.example.com</strong>에 설치하고 <strong>mychannel</strong>에  instantiate 할 것 이다. 그리고 나면 우리는 체인코드 함수들을 invoke 할 수 있다.</p><p>도커는 꼭 설치 되어있어야 한다. 간결하게 하기 위해, 나는 chaincode files(logic.js, index.js, package.json)를 <strong>chaincode/newcc</strong> 디렉토리에 마운트 해놓았다. 전체 코드는 <a href="https://github.com/Salmandabbakuti/chaincode-essentials">여기서</a> 볼 수 있다.</p><p>먼저, 우리는 네트워크를 시작하고 채널을 만들어야 한다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Salmandabbakuti&#x2F;chaincode-essentials.git</span><br><span class="line">cd chaincode-essentials&#x2F;basic-network</span><br><span class="line">.&#x2F;start.sh</span><br></pre></td></tr></table></figure><p>네트워크가 준비되기 까지 시간이 걸릴 것 이다. 만약 permission 에러가 나면, 그냥 root user 로 돌려라. 네트워크가 피어 하나랑 up 되어 가동되면, 우리는 체인코드를 설치할 준비가 되었다.</p><p>체인코드를 설치하고 invoke 하기 위해서 우리는 피어의 cli container를 사용할 것이다.</p><p>cli 컨테이너로 들어갈려면, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it cli bash</span><br></pre></td></tr></table></figure><br><br><h4 id="Installing-and-Instantiating-Chaincode"><a href="#Installing-and-Instantiating-Chaincode" class="headerlink" title="Installing and Instantiating Chaincode"></a>Installing and Instantiating Chaincode</h4><p>체인코드 설치 및 인스턴스화</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode install -n mycc -v 1.0 -p &quot;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;newcc&quot; -l &quot;node&quot;</span><br><span class="line">peer chaincode instantiate -o orderer.example.com:7050 -C mychannel -n mycc -l &quot;node&quot; -v 1.0 -c &#39;&#123;&quot;Args&quot;:[]&#125;&#39;</span><br></pre></td></tr></table></figure> <br><br><h4 id="Adding-Marks-of-Student"><a href="#Adding-Marks-of-Student" class="headerlink" title="Adding Marks of Student"></a>Adding Marks of Student</h4><p>학생의 점수 adding</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o orderer.example.com:7050 -C mychannel -n mycc -c &#39;&#123;&quot;function&quot;:&quot;addMarks&quot;,&quot;Args&quot;:[&quot;Alice&quot;,&quot;68&quot;,&quot;84&quot;,&quot;89&quot;]&#125;&#39;</span><br></pre></td></tr></table></figure><br><br><h4 id="Query-Marks-of-Student-“Alice”"><a href="#Query-Marks-of-Student-“Alice”" class="headerlink" title="Query Marks of Student “Alice”"></a>Query Marks of Student “Alice”</h4><p>“Alice” 라는 학생 검색</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o orderer.example.com:7050 -C mychannel -n mycc -c &#39;&#123;&quot;function&quot;:&quot;queryMarks&quot;,&quot;Args&quot;:[&quot;Alice&quot;]&#125;&#39;</span><br></pre></td></tr></table></figure><br><br><h4 id="Deleting-Marks-of-“Alice”-from-ledger"><a href="#Deleting-Marks-of-“Alice”-from-ledger" class="headerlink" title="Deleting Marks of “Alice” from ledger"></a>Deleting Marks of “Alice” from ledger</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o orderer.example.com:7050 -C mychannel -n mycc -c &#39;&#123;&quot;function&quot;:&quot;deleteMarks&quot;,&quot;Args&quot;:[&quot;Alice&quot;]&#125;&#39;</span><br></pre></td></tr></table></figure><p>위의 스크립트는 “Alice” 키와 관련된 데이터를 장부에서 지울 것 이다. 만약에 다시 Alice를 query한다면 studentId가 존재 하지 않는다고 에러가 날 것이다.</p><p>나는 자동으로 설치되고 테스트가 되는 체인코드를 클라이언트 디렉토리에 만들었다.</p><p>앞으로 나오는 것들을 따라해보자.</p><p>먼저, cli 컨테이너를 종료하고 클라이언트 디렉토리안에 스크립트를 실행한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">exit # exits from CLI docker container if you&#39;re in</span><br><span class="line">cd ..</span><br><span class="line">cd client  #change your directory to client</span><br><span class="line">chmod a+x start.sh</span><br><span class="line">.&#x2F;start.sh  #Automated script for testing</span><br></pre></td></tr></table></figure><p><strong>client/start.sh</strong>안에 정의되어있는 스크립트들을 통해서 체인코드를 invoke 할 수도 있다.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><h4 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h4><p>우리는 여기서 체인코드 , 체인코드 stub 인퍼페이스안의 함수, 체인코드의 배포 구조 들이 무엇인지 그리고 체인코드를 작성하고 배포하는것이 얼마나 쉬운지에 대해 알아보았다. 나는 이 기사가 체인코드를 시작하면서 작성하고 배포하는데 도움이 되었으면 한다.  </p><p><strong>Curious to know how we can build end-user Applications on Hyperldger Fabric? Check this:</strong> <a href="https://medium.com/@Salmandabbakuti/walkthrough-of-hyperledger-fabric-client-application-aae5222bdfd3"><strong>Walkthrough of Hyperledger Fabric Node SDK and Client Application</strong></a></p><p> 하이퍼레저 end-user 어플리케이션 빌드 하는 방법이 궁금하다면 클릭!</p><h4 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h4><p><a href="https://fabric-shim.github.io/release-1.4/index.html">https://fabric-shim.github.io/release-1.4/index.html</a></p><p><a href="https://fabric-sdk-node.github.io/master/index.html">https://fabric-sdk-node.github.io/master/index.html</a></p><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-1.4/chaincode.html">https://hyperledger-fabric.readthedocs.io/en/release-1.4/chaincode.html</a></p><p><a href="https://medium.com/coinmonks/start-developing-hyperledger-fabric-chaincode-in-node-js-e63b655d98db">https://medium.com/coinmonks/start-developing-hyperledger-fabric-chaincode-in-node-js-e63b655d98db</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;지난번 네트워크를 solo로 구성할때는 go로 체인코드를 작성 했었는데, 이번엔 나에게 조금더 친숙한 node js를 통해서 체인코드를 작성 할 것이다.  &lt;/p&gt;
&lt;p&gt;node js 로 체인코드를 작성 해본 적이 없어서 자료를 찾아보다 미디움에</summary>
      
    
    
    
    <category term="hyperledger fabric" scheme="https://yuminee.github.io/categories/hyperledger-fabric/"/>
    
    
    <category term="블록체인" scheme="https://yuminee.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
    <category term="hyperledger" scheme="https://yuminee.github.io/tags/hyperledger/"/>
    
    <category term="하이퍼레저" scheme="https://yuminee.github.io/tags/%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A0%88%EC%A0%80/"/>
    
    <category term="lockchain" scheme="https://yuminee.github.io/tags/lockchain/"/>
    
    <category term="chaincode in Nodejs" scheme="https://yuminee.github.io/tags/chaincode-in-Nodejs/"/>
    
    <category term="chaincode" scheme="https://yuminee.github.io/tags/chaincode/"/>
    
  </entry>
  
  <entry>
    <title>UFO Project 3 - Hyperledger Fabric channel implementation</title>
    <link href="https://yuminee.github.io/2020/11/29/Hyperledger%20fabric/raft_algorithm3/"/>
    <id>https://yuminee.github.io/2020/11/29/Hyperledger%20fabric/raft_algorithm3/</id>
    <published>2020-11-29T06:45:26.000Z</published>
    <updated>2021-06-02T14:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>generate 를 하고나면, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;byfn.sh up -o etcdraft -s couchdb -l node</span><br></pre></td></tr></table></figure><p>위의 명령어를 통해서 fabric network 를 up 합니다. </p><p>db는 couch db를 이용하고,  chaincode는 node js 로 작성할거다.</p><h3 id="BYFN의-프로세스"><a href="#BYFN의-프로세스" class="headerlink" title="BYFN의 프로세스"></a>BYFN의 프로세스</h3><ol><li>5개의 오더링 서비스 노드, 4개의 피어 노드 총 9개의 노드 컨테이너., CLI 컨테이너, 각 조직의 ca 컨테이너( 총 2개), 4개의 couchdb 컨테이너 가 실행되며, 총 16개의 컨테이너가 먼저 실행된다.</li><li> 네트워크 내부의 CLI 컨테이너에 접속해 생성된 채널 트랜잭션 파일인 channel.tx를 가지고 채널을 생성하고 채널 ufochannel을 생성하고 모든 피어노드를 가입시킨다.</li><li>두 조직의 peer0을 앵커로 가입한다</li></ol><p>위의 과정을 구현하기 위해서 필요한 파일은</p><ul><li>docker-compose-ca.yaml</li><li>docker-compose-cli.yaml</li><li>docker-compose-couch.yaml</li><li>docker-compose-etcdraft2.yaml</li><li>docker-compose-base.yaml</li><li>peer-base.yaml</li></ul><p>들을 만질 것 이다.</p><h4 id="docker-compose-ca-yaml"><a href="#docker-compose-ca-yaml" class="headerlink" title="docker-compose-ca.yaml"></a>docker-compose-ca.yaml</h4><ul><li>CA는 MSP에서 암호화 인증을 위해 필요한 인증기관이며, 공개키 인증서 및 이에 대응하는 개인키를 발급한다. 블록체인 네트워크를 구성하는 조직에게는 루트 인증서를, 블록체인 네트워크에 접속하는 사용자에게는 신원등록 인증서를 발급한다.</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">byfn:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">ca0:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca:$IMAGE_TAG</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CA_NAME=ca-sales</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.sales.ufo.com-cert.pem</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/$&#123;BYFN_CA1_PRIVATE_KEY&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_PORT=7054</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7054:7054&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">&#x27;fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.sales.ufo.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/$&#123;BYFN_CA1_PRIVATE_KEY&#125; -b admin:adminpw -d&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./crypto-config/peerOrganizations/sales.ufo.com/ca/:/etc/hyperledger/fabric-ca-server-config</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ca_peerSales</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ca1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca:$IMAGE_TAG</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CA_NAME=ca-customer</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.customer.ufo.com-cert.pem</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/$&#123;BYFN_CA2_PRIVATE_KEY&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_PORT=8054</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8054:8054&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">&#x27;fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.customer.ufo.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/$&#123;BYFN_CA2_PRIVATE_KEY&#125; -b admin:adminpw -d&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./crypto-config/peerOrganizations/customer.ufo.com/ca/:/etc/hyperledger/fabric-ca-server-config</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ca_peerCustomer</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br></pre></td></tr></table></figure><ul><li>network는 byfn이고 services 로 ca0, ca1이 있다.</li><li>ca0 은 sales 조직을 서비스하고, ca1은 customer 조직을 서비스한다.</li></ul><h4 id="docker-compose-cli-yaml"><a href="#docker-compose-cli-yaml" class="headerlink" title="docker-compose-cli.yaml"></a>docker-compose-cli.yaml</h4><ul><li>volumes</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">orderer.ufo.com:</span></span><br><span class="line">  <span class="attr">peer0.sales.ufo.com:</span></span><br><span class="line">  <span class="attr">peer1.sales.ufo.com:</span></span><br><span class="line">  <span class="attr">peer0.customer.ufo.com:</span></span><br><span class="line">  <span class="attr">peer1.customer.ufo.com:</span></span><br><span class="line">  <span class="attr">ca.sales.ufo.com:</span></span><br><span class="line">  <span class="attr">ca.customer.ufo.com:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>먼저 docker-compose-cli파일의 volumes 이다.</p><ul><li>docker volume이란?<ul><li>container의 데이터 휘발성 때문에 데이터를 container가 아닌 호스트에 저장할 때,  또는 container 끼리 데이터를 공유할때 Volume을 사용.</li></ul></li><li>ca</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ca.sales.ufo.com:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CA_NAME=ca.sales.ufo.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.sales.ufo.com-cert.pem</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/ca.sales.ufo.com_sk</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7054:7054&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">&#x27;fabric-ca-server start -b admin:adminpw&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./crypto-config/peerOrganizations/sales.ufo.com/ca/:/etc/hyperledger/fabric-ca-server-config</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ca.sales.ufo.com</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br></pre></td></tr></table></figure><p>위는 ca.sales.ufo.com을 설정하는 부분이다.  ca.customer.ufo.com도 위에서 sales를 customer로 바꿔주면 된다.</p><ul><li><p>order</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">orderer.ufo.com:</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span>   <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">orderer.ufo.com</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer.ufo.com</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br></pre></td></tr></table></figure><p>raft 의 핵심! 오더러 설정 부분이다. 나는 다섯개의 오더러를 설정했으므로, </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">orderer2.ufo.com:</span></span><br><span class="line">   <span class="attr">extends:</span></span><br><span class="line">     <span class="attr">file:</span>   <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">     <span class="attr">service:</span> <span class="string">orderer2.ufo.com</span></span><br><span class="line">   <span class="attr">container_name:</span> <span class="string">orderer2.ufo.com</span></span><br><span class="line">   <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">byfn</span></span><br></pre></td></tr></table></figure><p>이런식으로 orderer3, orderer4, orderer5 를 더 만들어 준다.</p></li><li><p>peer</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">peer0.sales.ufo.com:</span></span><br><span class="line">   <span class="attr">container_name:</span> <span class="string">peer0.sales.ufo.com</span></span><br><span class="line">   <span class="attr">extends:</span></span><br><span class="line">     <span class="attr">file:</span>  <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">     <span class="attr">service:</span> <span class="string">peer0.sales.ufo.com</span></span><br><span class="line">   <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line">  </span><br><span class="line"> <span class="attr">peer1.sales.ufo.com:</span></span><br><span class="line">   <span class="attr">container_name:</span> <span class="string">peer1.sales.ufo.com</span></span><br><span class="line">   <span class="attr">extends:</span></span><br><span class="line">     <span class="attr">file:</span>  <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">     <span class="attr">service:</span> <span class="string">peer1.sales.ufo.com</span></span><br><span class="line">   <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>sales  조직에 대한 peer0, peer1을 설정하고 위 설정에서 sales를 customer로 바꾸면 customer 설정이다.</p></li><li><p>cli</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cli:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cli</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-tools:$IMAGE_TAG</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">stdin_open:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYS_CHANNEL=$SYS_CHANNEL</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GOPATH=/opt/gopath</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=cli</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.sales.ufo.com:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=SalesMSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/sales.ufo.com/peers/peer0.sales.ufo.com/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/sales.ufo.com/peers/peer0.sales.ufo.com/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/sales.ufo.com/peers/peer0.sales.ufo.com/tls/ca.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/sales.ufo.com/users/Admin@sales.ufo.com/msp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./../chaincode/:/opt/gopath/src/github.com/chaincode</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer.ufo.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer2.ufo.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer3.ufo.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer4.ufo.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer5.ufo.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.sales.ufo.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer1.sales.ufo.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.customer.ufo.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer1.customer.ufo.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ca.sales.ufo.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ca.customer.ufo.com</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br></pre></td></tr></table></figure><p>위에는 cli 설정이다. cli 컨테이너는 위에서 설정해준 모든 컨테이너에 의존한다.</p></li></ul><h4 id="docker-compose-couch-yaml"><a href="#docker-compose-couch-yaml" class="headerlink" title="docker-compose-couch.yaml"></a>docker-compose-couch.yaml</h4><p>couchdb 설정 yaml 파일이다. 여기서 구성한 네트워크에서는 총 4개의 couchdb 컨테이너가 있는데,</p><p>각각의 컨테이너는</p><ul><li><p>couchdb0 : peer0.sales.ufo.com</p></li><li><p>couchdb1 : peer1.sales.ufo.com</p></li><li><p>couchdb2 : peer0.customer.ufo.com</p></li><li><p>couchdb3 : peer1.customer.ufo.com</p><p>에 대응한다.</p></li></ul><p>예시로 여기서는 couchdb0의 설정만 올리겠다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">couchdb0:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">couchdb0</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-couchdb</span></span><br><span class="line">    <span class="comment"># Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password</span></span><br><span class="line">    <span class="comment"># for CouchDB.  This will prevent CouchDB from operating in an &quot;Admin Party&quot; mode.</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_USER=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_PASSWORD=</span></span><br><span class="line">    <span class="comment"># Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,</span></span><br><span class="line">    <span class="comment"># for example map it to utilize Fauxton User Interface in dev environments.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5984:5984&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.sales.ufo.com:</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_STATEDATABASE=CouchDB</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0:5984</span></span><br><span class="line">      <span class="comment"># The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD</span></span><br><span class="line">      <span class="comment"># provide the credentials for ledger to connect to CouchDB.  The username and password must</span></span><br><span class="line">      <span class="comment"># match the username and password set for the associated CouchDB.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">couchdb0</span></span><br></pre></td></tr></table></figure><p>​        </p><h4 id="docker-compose-etcdraft2-yaml"><a href="#docker-compose-etcdraft2-yaml" class="headerlink" title="docker-compose-etcdraft2.yaml"></a>docker-compose-etcdraft2.yaml</h4><p>여기서는 raft를 위해 orderer를 제외하고 나머지 orderer2, orderer3, orderer4, orderer5를 설정한다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">orderer2.ufo.com:</span></span><br><span class="line">  <span class="attr">orderer3.ufo.com:</span></span><br><span class="line">  <span class="attr">orderer4.ufo.com:</span></span><br><span class="line">  <span class="attr">orderer5.ufo.com:</span></span><br></pre></td></tr></table></figure><p>이 파일 또한 예시로 orderer2.ufo.com 만 첨부 하겠다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">orderer2.ufo.com:</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">base/peer-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">orderer-base</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer2.ufo.com</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./crypto-config/ordererOrganizations/ufo.com/orderers/orderer2.ufo.com/msp:/var/hyperledger/orderer/msp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./crypto-config/ordererOrganizations/ufo.com/orderers/orderer2.ufo.com/tls/:/var/hyperledger/orderer/tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">orderer2.ufo.com:/var/hyperledger/production/orderer</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8050</span><span class="string">:7050</span></span><br></pre></td></tr></table></figure><h4 id="docker-compose-base-yaml"><a href="#docker-compose-base-yaml" class="headerlink" title="docker-compose-base.yaml"></a>docker-compose-base.yaml</h4><p>이름 그대로, docker-compose의 base가 되는 yaml 설정 파일이다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">orderer.ufo.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer.ufo.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">peer-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">orderer-base</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/ordererOrganizations/ufo.com/orderers/orderer.ufo.com/msp:/var/hyperledger/orderer/msp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/ordererOrganizations/ufo.com/orderers/orderer.ufo.com/tls/:/var/hyperledger/orderer/tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">orderer.ufo.com:/var/hyperledger/production/orderer</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7050</span><span class="string">:7050</span></span><br></pre></td></tr></table></figure><p>orderer.ufo.com 을 예시로 들었다. 전체 코드는 git에서 확인 할 수 있다.</p><h4 id="peer-base-yaml"><a href="#peer-base-yaml" class="headerlink" title="peer-base.yaml"></a>peer-base.yaml</h4><p>이 파일에서는 peer-base, orderer-base의 환경변수 설정등을 한다.</p><p>자세한 파일 내용은 git에서 확인 할 수 있다.</p><hr><ul><li>전체 코드 GIT : <a href="https://github.com/yuminee/UFO_FabricNet_raft">https://github.com/yuminee/UFO_FabricNet_raft</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;generate 를 하고나면, &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td cl</summary>
      
    
    
    
    <category term="hyperledger fabric" scheme="https://yuminee.github.io/categories/hyperledger-fabric/"/>
    
    
    <category term="블록체인" scheme="https://yuminee.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/"/>
    
    <category term="raft" scheme="https://yuminee.github.io/tags/raft/"/>
    
    <category term="blockchain" scheme="https://yuminee.github.io/tags/blockchain/"/>
    
    <category term="hyperledger fabric" scheme="https://yuminee.github.io/tags/hyperledger-fabric/"/>
    
    <category term="하이퍼레저 패브릭" scheme="https://yuminee.github.io/tags/%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A0%88%EC%A0%80-%ED%8C%A8%EB%B8%8C%EB%A6%AD/"/>
    
  </entry>
  
</feed>
